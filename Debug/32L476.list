
32L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004674  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080047fc  080047fc  000057fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004844  08004844  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004844  08004844  00005844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800484c  0800484c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800484c  0800484c  0000584c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004850  08004850  00005850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004854  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08004860  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08004860  00006104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee4b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002174  00000000  00000000  00014e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00017000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d6  00000000  00000000  00017ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258b6  00000000  00000000  0001867e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001061e  00000000  00000000  0003df34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6f40  00000000  00000000  0004e552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135492  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000342c  00000000  00000000  001354d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00138904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080047e4 	.word	0x080047e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080047e4 	.word	0x080047e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <erase_eeprom>:

}

//-------------------------------------
void erase_eeprom ()
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08e      	sub	sp, #56	@ 0x38
 80004bc:	af04      	add	r7, sp, #16
uint8_t dock_out[BUFFER_SIZE];




		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004c4:	483b      	ldr	r0, [pc, #236]	@ (80005b4 <erase_eeprom+0xfc>)
 80004c6:	f000 ff37 	bl	8001338 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 80004ca:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004ce:	f000 fbd5 	bl	8000c7c <HAL_Delay>

		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004d8:	4836      	ldr	r0, [pc, #216]	@ (80005b4 <erase_eeprom+0xfc>)
 80004da:	f000 ff2d 	bl	8001338 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80004de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004e2:	f000 fbcb 	bl	8000c7c <HAL_Delay>

		uint16_t i=0x00;
 80004e6:	2300      	movs	r3, #0
 80004e8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		for(i=0; i<BUFFER_SIZE; i++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80004ee:	e00e      	b.n	800050e <erase_eeprom+0x56>
		{
			dock_in[i]=0xFF;
 80004f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004f2:	3328      	adds	r3, #40	@ 0x28
 80004f4:	443b      	add	r3, r7
 80004f6:	22ff      	movs	r2, #255	@ 0xff
 80004f8:	f803 2c14 	strb.w	r2, [r3, #-20]
			dock_out[i]=0;
 80004fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004fe:	3328      	adds	r3, #40	@ 0x28
 8000500:	443b      	add	r3, r7
 8000502:	2200      	movs	r2, #0
 8000504:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(i=0; i<BUFFER_SIZE; i++)
 8000508:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800050a:	3301      	adds	r3, #1
 800050c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800050e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000510:	2b0f      	cmp	r3, #15
 8000512:	d9ed      	bls.n	80004f0 <erase_eeprom+0x38>
		}


		///-------general cycle------
		for(i=0x00; i<MAX_ADDR; i++)
 8000514:	2300      	movs	r3, #0
 8000516:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000518:	e036      	b.n	8000588 <erase_eeprom+0xd0>
		{
			HAL_I2C_Mem_Write(&hi2c2, 0xA0, i, I2C_MEMADD_SIZE_8BIT, dock_in, BUFFER_SIZE, 1000);
 800051a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800051c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000520:	9302      	str	r3, [sp, #8]
 8000522:	2310      	movs	r3, #16
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2301      	movs	r3, #1
 800052e:	21a0      	movs	r1, #160	@ 0xa0
 8000530:	4821      	ldr	r0, [pc, #132]	@ (80005b8 <erase_eeprom+0x100>)
 8000532:	f000 ffa9 	bl	8001488 <HAL_I2C_Mem_Write>
			HAL_Delay(500);
 8000536:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800053a:	f000 fb9f 	bl	8000c7c <HAL_Delay>

			HAL_I2C_Mem_Read(&hi2c2, 0xA0, i, I2C_MEMADD_SIZE_8BIT, dock_out, BUFFER_SIZE, 1000);
 800053e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000540:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000544:	9302      	str	r3, [sp, #8]
 8000546:	2310      	movs	r3, #16
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2301      	movs	r3, #1
 8000550:	21a0      	movs	r1, #160	@ 0xa0
 8000552:	4819      	ldr	r0, [pc, #100]	@ (80005b8 <erase_eeprom+0x100>)
 8000554:	f001 f8ac 	bl	80016b0 <HAL_I2C_Mem_Read>
			HAL_UART_Transmit(&huart4, dock_out, BUFFER_SIZE, 1000);
 8000558:	1d39      	adds	r1, r7, #4
 800055a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800055e:	2210      	movs	r2, #16
 8000560:	4816      	ldr	r0, [pc, #88]	@ (80005bc <erase_eeprom+0x104>)
 8000562:	f003 f869 	bl	8003638 <HAL_UART_Transmit>

			dock_out[1]=i;
 8000566:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000568:	b2db      	uxtb	r3, r3
 800056a:	717b      	strb	r3, [r7, #5]
			dock_out[2]=13;
 800056c:	230d      	movs	r3, #13
 800056e:	71bb      	strb	r3, [r7, #6]
			dock_out[0]=13;
 8000570:	230d      	movs	r3, #13
 8000572:	713b      	strb	r3, [r7, #4]

			HAL_UART_Transmit(&huart4, dock_out, 3, 1000);
 8000574:	1d39      	adds	r1, r7, #4
 8000576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057a:	2203      	movs	r2, #3
 800057c:	480f      	ldr	r0, [pc, #60]	@ (80005bc <erase_eeprom+0x104>)
 800057e:	f003 f85b 	bl	8003638 <HAL_UART_Transmit>
		for(i=0x00; i<MAX_ADDR; i++)
 8000582:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000584:	3301      	adds	r3, #1
 8000586:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000588:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800058a:	2bff      	cmp	r3, #255	@ 0xff
 800058c:	d9c5      	bls.n	800051a <erase_eeprom+0x62>

		}

		HAL_Delay(1500);
 800058e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000592:	f000 fb73 	bl	8000c7c <HAL_Delay>

		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800059c:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <erase_eeprom+0xfc>)
 800059e:	f000 fecb 	bl	8001338 <HAL_GPIO_WritePin>

		HAL_Delay(1500);
 80005a2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80005a6:	f000 fb69 	bl	8000c7c <HAL_Delay>



}
 80005aa:	bf00      	nop
 80005ac:	3728      	adds	r7, #40	@ 0x28
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	48000800 	.word	0x48000800
 80005b8:	20000028 	.word	0x20000028
 80005bc:	2000007c 	.word	0x2000007c

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fae5 	bl	8000b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f80a 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f8c8 	bl	8000760 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005d0:	f000 f856 	bl	8000680 <MX_I2C2_Init>
  MX_UART4_Init();
 80005d4:	f000 f894 	bl	8000700 <MX_UART4_Init>





  	  	  erase_eeprom();
 80005d8:	f7ff ff6e 	bl	80004b8 <erase_eeprom>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <main+0x1c>

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	@ 0x58
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2244      	movs	r2, #68	@ 0x44
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 f8cc 	bl	800478c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	463b      	mov	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000602:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000606:	f001 fcb9 	bl	8001f7c <HAL_PWREx_ControlVoltageScaling>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000610:	f000 f95e 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	2303      	movs	r3, #3
 8000624:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 800062a:	2309      	movs	r3, #9
 800062c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062e:	2307      	movs	r3, #7
 8000630:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fcf2 	bl	8002028 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800064a:	f000 f941 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2303      	movs	r3, #3
 8000654:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2104      	movs	r1, #4
 8000666:	4618      	mov	r0, r3
 8000668:	f002 f8ba 	bl	80027e0 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000672:	f000 f92d 	bl	80008d0 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3758      	adds	r7, #88	@ 0x58
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_I2C2_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <MX_I2C2_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702681;
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_I2C2_Init+0x74>)
 800068c:	4a1b      	ldr	r2, [pc, #108]	@ (80006fc <MX_I2C2_Init+0x7c>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_I2C2_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000696:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_I2C2_Init+0x74>)
 8000698:	2201      	movs	r2, #1
 800069a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <MX_I2C2_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006ba:	480e      	ldr	r0, [pc, #56]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006bc:	f000 fe54 	bl	8001368 <HAL_I2C_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006c6:	f000 f903 	bl	80008d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ca:	2100      	movs	r1, #0
 80006cc:	4809      	ldr	r0, [pc, #36]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006ce:	f001 fbaf 	bl	8001e30 <HAL_I2CEx_ConfigAnalogFilter>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006d8:	f000 f8fa 	bl	80008d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006dc:	2100      	movs	r1, #0
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_I2C2_Init+0x74>)
 80006e0:	f001 fbf1 	bl	8001ec6 <HAL_I2CEx_ConfigDigitalFilter>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 f8f1 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000028 	.word	0x20000028
 80006f8:	40005800 	.word	0x40005800
 80006fc:	00702681 	.word	0x00702681

08000700 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_UART4_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	@ (800075c <MX_UART4_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_UART4_Init+0x58>)
 800070c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000710:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_UART4_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_UART4_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_UART4_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_UART4_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_UART4_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_UART4_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <MX_UART4_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_UART4_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_UART4_Init+0x58>)
 8000744:	f002 ff2a 	bl	800359c <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f8bf 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000007c 	.word	0x2000007c
 800075c:	40004c00 	.word	0x40004c00

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b52      	ldr	r3, [pc, #328]	@ (80008c0 <MX_GPIO_Init+0x160>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a51      	ldr	r2, [pc, #324]	@ (80008c0 <MX_GPIO_Init+0x160>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4b4f      	ldr	r3, [pc, #316]	@ (80008c0 <MX_GPIO_Init+0x160>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b4c      	ldr	r3, [pc, #304]	@ (80008c0 <MX_GPIO_Init+0x160>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a4b      	ldr	r2, [pc, #300]	@ (80008c0 <MX_GPIO_Init+0x160>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b49      	ldr	r3, [pc, #292]	@ (80008c0 <MX_GPIO_Init+0x160>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b46      	ldr	r3, [pc, #280]	@ (80008c0 <MX_GPIO_Init+0x160>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	4a45      	ldr	r2, [pc, #276]	@ (80008c0 <MX_GPIO_Init+0x160>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b2:	4b43      	ldr	r3, [pc, #268]	@ (80008c0 <MX_GPIO_Init+0x160>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b40      	ldr	r3, [pc, #256]	@ (80008c0 <MX_GPIO_Init+0x160>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4a3f      	ldr	r2, [pc, #252]	@ (80008c0 <MX_GPIO_Init+0x160>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4b3d      	ldr	r3, [pc, #244]	@ (80008c0 <MX_GPIO_Init+0x160>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	4b3a      	ldr	r3, [pc, #232]	@ (80008c0 <MX_GPIO_Init+0x160>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a39      	ldr	r2, [pc, #228]	@ (80008c0 <MX_GPIO_Init+0x160>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4b37      	ldr	r3, [pc, #220]	@ (80008c0 <MX_GPIO_Init+0x160>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D5_Pin|PAG_CLKOUT_Pin|PAG_TXRXCLK_Pin|PAG_TXRXDATA_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80007f4:	4833      	ldr	r0, [pc, #204]	@ (80008c4 <MX_GPIO_Init+0x164>)
 80007f6:	f000 fd9f 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GAS_RX_Pin|LAMP_Pin|PAG_MUX_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 4114 	mov.w	r1, #37888	@ 0x9400
 8000800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000804:	f000 fd98 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAG_SWD_GPIO_Port, PAG_SWD_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2104      	movs	r1, #4
 800080c:	482e      	ldr	r0, [pc, #184]	@ (80008c8 <MX_GPIO_Init+0x168>)
 800080e:	f000 fd93 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PAG_SCK_Pin|PAG_MISO_Pin|PAG_MOSI_Pin|PAG_SLE_Pin
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8000818:	482c      	ldr	r0, [pc, #176]	@ (80008cc <MX_GPIO_Init+0x16c>)
 800081a:	f000 fd8d 	bl	8001338 <HAL_GPIO_WritePin>
                          |PAG_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D5_Pin PAG_CLKOUT_Pin PAG_TXRXCLK_Pin PAG_TXRXDATA_Pin */
  GPIO_InitStruct.Pin = D5_Pin|PAG_CLKOUT_Pin|PAG_TXRXCLK_Pin|PAG_TXRXDATA_Pin;
 800081e:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4823      	ldr	r0, [pc, #140]	@ (80008c4 <MX_GPIO_Init+0x164>)
 8000838:	f000 fbd4 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GAS_RX_Pin LAMP_Pin PAG_MUX_Pin */
  GPIO_InitStruct.Pin = GAS_RX_Pin|LAMP_Pin|PAG_MUX_Pin;
 800083c:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000858:	f000 fbc4 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAG_SWD_Pin */
  GPIO_InitStruct.Pin = PAG_SWD_Pin;
 800085c:	2304      	movs	r3, #4
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PAG_SWD_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4815      	ldr	r0, [pc, #84]	@ (80008c8 <MX_GPIO_Init+0x168>)
 8000874:	f000 fbb6 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAG_SCK_Pin PAG_MISO_Pin PAG_MOSI_Pin PAG_SLE_Pin
                           PAG_CE_Pin */
  GPIO_InitStruct.Pin = PAG_SCK_Pin|PAG_MISO_Pin|PAG_MOSI_Pin|PAG_SLE_Pin
 8000878:	f44f 734e 	mov.w	r3, #824	@ 0x338
 800087c:	617b      	str	r3, [r7, #20]
                          |PAG_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	480e      	ldr	r0, [pc, #56]	@ (80008cc <MX_GPIO_Init+0x16c>)
 8000892:	f000 fba7 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000896:	23c0      	movs	r3, #192	@ 0xc0
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800089a:	2312      	movs	r3, #18
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a6:	2304      	movs	r3, #4
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4806      	ldr	r0, [pc, #24]	@ (80008cc <MX_GPIO_Init+0x16c>)
 80008b2:	f000 fb97 	bl	8000fe4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	@ 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000800 	.word	0x48000800
 80008c8:	48000c00 	.word	0x48000c00
 80008cc:	48000400 	.word	0x48000400

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <HAL_MspInit+0x44>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <HAL_MspInit+0x44>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	@ 0x58
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b0ac      	sub	sp, #176	@ 0xb0
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2288      	movs	r2, #136	@ 0x88
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f003 ff21 	bl	800478c <memset>
  if(hi2c->Instance==I2C2)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <HAL_I2C_MspInit+0xb0>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d13b      	bne.n	80009cc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000958:	2300      	movs	r3, #0
 800095a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4618      	mov	r0, r3
 8000962:	f002 f95f 	bl	8002c24 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800096c:	f7ff ffb0 	bl	80008d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <HAL_I2C_MspInit+0xb4>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000974:	4a18      	ldr	r2, [pc, #96]	@ (80009d8 <HAL_I2C_MspInit+0xb4>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097c:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <HAL_I2C_MspInit+0xb4>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000988:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800098c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000990:	2312      	movs	r3, #18
 8000992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009a2:	2304      	movs	r3, #4
 80009a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ac:	4619      	mov	r1, r3
 80009ae:	480b      	ldr	r0, [pc, #44]	@ (80009dc <HAL_I2C_MspInit+0xb8>)
 80009b0:	f000 fb18 	bl	8000fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <HAL_I2C_MspInit+0xb4>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b8:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <HAL_I2C_MspInit+0xb4>)
 80009ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009be:	6593      	str	r3, [r2, #88]	@ 0x58
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <HAL_I2C_MspInit+0xb4>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80009cc:	bf00      	nop
 80009ce:	37b0      	adds	r7, #176	@ 0xb0
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40005800 	.word	0x40005800
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400

080009e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0ac      	sub	sp, #176	@ 0xb0
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2288      	movs	r2, #136	@ 0x88
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fec3 	bl	800478c <memset>
  if(huart->Instance==UART4)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a25      	ldr	r2, [pc, #148]	@ (8000aa0 <HAL_UART_MspInit+0xc0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d143      	bne.n	8000a98 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000a10:	2308      	movs	r3, #8
 8000a12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000a14:	2340      	movs	r3, #64	@ 0x40
 8000a16:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 f901 	bl	8002c24 <HAL_RCCEx_PeriphCLKConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a28:	f7ff ff52 	bl	80008d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <HAL_UART_MspInit+0xc4>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a30:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa4 <HAL_UART_MspInit+0xc4>)
 8000a32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a38:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <HAL_UART_MspInit+0xc4>)
 8000a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <HAL_UART_MspInit+0xc4>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a48:	4a16      	ldr	r2, [pc, #88]	@ (8000aa4 <HAL_UART_MspInit+0xc4>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a50:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <HAL_UART_MspInit+0xc4>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a74:	2308      	movs	r3, #8
 8000a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f000 faae 	bl	8000fe4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2034      	movs	r0, #52	@ 0x34
 8000a8e:	f000 f9f4 	bl	8000e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000a92:	2034      	movs	r0, #52	@ 0x34
 8000a94:	f000 fa0d 	bl	8000eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000a98:	bf00      	nop
 8000a9a:	37b0      	adds	r7, #176	@ 0xb0
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40004c00 	.word	0x40004c00
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f89d 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <UART4_IRQHandler+0x10>)
 8000b0e:	f002 fe27 	bl	8003760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000007c 	.word	0x2000007c

08000b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	@ (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b44:	f7ff ffea 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	@ (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	@ (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f003 fe15 	bl	800479c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b72:	f7ff fd25 	bl	80005c0 <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b84:	08004854 	.word	0x08004854
  ldr r2, =_sbss
 8000b88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b8c:	20000104 	.word	0x20000104

08000b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_2_IRQHandler>

08000b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f961 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	f000 f80e 	bl	8000bc4 <HAL_InitTick>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	e001      	b.n	8000bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb4:	f7ff fe92 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd0:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <HAL_InitTick+0x6c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d023      	beq.n	8000c20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <HAL_InitTick+0x70>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <HAL_InitTick+0x6c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f96d 	bl	8000ece <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10f      	bne.n	8000c1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d809      	bhi.n	8000c14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f937 	bl	8000e7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <HAL_InitTick+0x74>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e007      	b.n	8000c24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e004      	b.n	8000c24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	e001      	b.n	8000c24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000004 	.word	0x20000004

08000c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_IncTick+0x20>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_IncTick+0x24>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <HAL_IncTick+0x24>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000100 	.word	0x20000100

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b03      	ldr	r3, [pc, #12]	@ (8000c78 <HAL_GetTick+0x14>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000100 	.word	0x20000100

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff ffee 	bl	8000c64 <HAL_GetTick>
 8000c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c94:	d005      	beq.n	8000ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c96:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <HAL_Delay+0x44>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca2:	bf00      	nop
 8000ca4:	f7ff ffde 	bl	8000c64 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f7      	bhi.n	8000ca4 <HAL_Delay+0x28>
  {
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008

08000cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <__NVIC_GetPriorityGrouping+0x18>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	f003 0307 	and.w	r3, r3, #7
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db0b      	blt.n	8000d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 021f 	and.w	r2, r3, #31
 8000d40:	4907      	ldr	r1, [pc, #28]	@ (8000d60 <__NVIC_EnableIRQ+0x38>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	2001      	movs	r0, #1
 8000d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	@ (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	@ (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	@ 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	@ 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f7ff ff8e 	bl	8000d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff29 	bl	8000cc4 <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff3e 	bl	8000d0c <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff8e 	bl	8000db8 <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5d 	bl	8000d64 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff31 	bl	8000d28 <__NVIC_EnableIRQ>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ffa2 	bl	8000e20 <SysTick_Config>
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b085      	sub	sp, #20
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d008      	beq.n	8000f10 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2204      	movs	r2, #4
 8000f02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e022      	b.n	8000f56 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 020e 	bic.w	r2, r2, #14
 8000f1e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0201 	bic.w	r2, r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f34:	f003 021c 	and.w	r2, r3, #28
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f42:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d005      	beq.n	8000f86 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	e029      	b.n	8000fda <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 020e 	bic.w	r2, r2, #14
 8000f94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0201 	bic.w	r2, r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	f003 021c 	and.w	r2, r3, #28
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	4798      	blx	r3
    }
  }
  return status;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff2:	e17f      	b.n	80012f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8171 	beq.w	80012ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d005      	beq.n	8001024 <HAL_GPIO_Init+0x40>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d130      	bne.n	8001086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105a:	2201      	movs	r2, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	f003 0201 	and.w	r2, r3, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b03      	cmp	r3, #3
 8001090:	d118      	bne.n	80010c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001098:	2201      	movs	r2, #1
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	08db      	lsrs	r3, r3, #3
 80010ae:	f003 0201 	and.w	r2, r3, #1
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d017      	beq.n	8001100 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d123      	bne.n	8001154 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	6939      	ldr	r1, [r7, #16]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0203 	and.w	r2, r3, #3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80ac 	beq.w	80012ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	4b5f      	ldr	r3, [pc, #380]	@ (8001314 <HAL_GPIO_Init+0x330>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119a:	4a5e      	ldr	r2, [pc, #376]	@ (8001314 <HAL_GPIO_Init+0x330>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001314 <HAL_GPIO_Init+0x330>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001318 <HAL_GPIO_Init+0x334>)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3302      	adds	r3, #2
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x242>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	@ (800131c <HAL_GPIO_Init+0x338>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x23e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001320 <HAL_GPIO_Init+0x33c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x23a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001324 <HAL_GPIO_Init+0x340>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x236>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001328 <HAL_GPIO_Init+0x344>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x232>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	@ (800132c <HAL_GPIO_Init+0x348>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x22e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4a      	ldr	r2, [pc, #296]	@ (8001330 <HAL_GPIO_Init+0x34c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x22a>
 800120a:	2306      	movs	r3, #6
 800120c:	e00c      	b.n	8001228 <HAL_GPIO_Init+0x244>
 800120e:	2307      	movs	r3, #7
 8001210:	e00a      	b.n	8001228 <HAL_GPIO_Init+0x244>
 8001212:	2305      	movs	r3, #5
 8001214:	e008      	b.n	8001228 <HAL_GPIO_Init+0x244>
 8001216:	2304      	movs	r3, #4
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x244>
 800121a:	2303      	movs	r3, #3
 800121c:	e004      	b.n	8001228 <HAL_GPIO_Init+0x244>
 800121e:	2302      	movs	r3, #2
 8001220:	e002      	b.n	8001228 <HAL_GPIO_Init+0x244>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x244>
 8001226:	2300      	movs	r3, #0
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	f002 0203 	and.w	r2, r2, #3
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	4093      	lsls	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001238:	4937      	ldr	r1, [pc, #220]	@ (8001318 <HAL_GPIO_Init+0x334>)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001246:	4b3b      	ldr	r3, [pc, #236]	@ (8001334 <HAL_GPIO_Init+0x350>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800126a:	4a32      	ldr	r2, [pc, #200]	@ (8001334 <HAL_GPIO_Init+0x350>)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001270:	4b30      	ldr	r3, [pc, #192]	@ (8001334 <HAL_GPIO_Init+0x350>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001294:	4a27      	ldr	r2, [pc, #156]	@ (8001334 <HAL_GPIO_Init+0x350>)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <HAL_GPIO_Init+0x350>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012be:	4a1d      	ldr	r2, [pc, #116]	@ (8001334 <HAL_GPIO_Init+0x350>)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <HAL_GPIO_Init+0x350>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012e8:	4a12      	ldr	r2, [pc, #72]	@ (8001334 <HAL_GPIO_Init+0x350>)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa22 f303 	lsr.w	r3, r2, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f47f ae78 	bne.w	8000ff4 <HAL_GPIO_Init+0x10>
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	40010000 	.word	0x40010000
 800131c:	48000400 	.word	0x48000400
 8001320:	48000800 	.word	0x48000800
 8001324:	48000c00 	.word	0x48000c00
 8001328:	48001000 	.word	0x48001000
 800132c:	48001400 	.word	0x48001400
 8001330:	48001800 	.word	0x48001800
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001354:	e002      	b.n	800135c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e081      	b.n	800147e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fac8 	bl	8000924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2224      	movs	r2, #36	@ 0x24
 8001398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d107      	bne.n	80013e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	e006      	b.n	80013f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80013ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d104      	bne.n	8001402 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001400:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001410:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001414:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001424:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69d9      	ldr	r1, [r3, #28]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1a      	ldr	r2, [r3, #32]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2220      	movs	r2, #32
 800146a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af02      	add	r7, sp, #8
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	4608      	mov	r0, r1
 8001492:	4611      	mov	r1, r2
 8001494:	461a      	mov	r2, r3
 8001496:	4603      	mov	r3, r0
 8001498:	817b      	strh	r3, [r7, #10]
 800149a:	460b      	mov	r3, r1
 800149c:	813b      	strh	r3, [r7, #8]
 800149e:	4613      	mov	r3, r2
 80014a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b20      	cmp	r3, #32
 80014ac:	f040 80f9 	bne.w	80016a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_I2C_Mem_Write+0x34>
 80014b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014c2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0ed      	b.n	80016a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_I2C_Mem_Write+0x4e>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e0e6      	b.n	80016a4 <HAL_I2C_Mem_Write+0x21c>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014de:	f7ff fbc1 	bl	8000c64 <HAL_GetTick>
 80014e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2319      	movs	r3, #25
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 fac3 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0d1      	b.n	80016a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2221      	movs	r2, #33	@ 0x21
 8001504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2240      	movs	r2, #64	@ 0x40
 800150c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a3a      	ldr	r2, [r7, #32]
 800151a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001520:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001528:	88f8      	ldrh	r0, [r7, #6]
 800152a:	893a      	ldrh	r2, [r7, #8]
 800152c:	8979      	ldrh	r1, [r7, #10]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4603      	mov	r3, r0
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 f9d3 	bl	80018e4 <I2C_RequestMemoryWrite>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0a9      	b.n	80016a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001554:	b29b      	uxth	r3, r3
 8001556:	2bff      	cmp	r3, #255	@ 0xff
 8001558:	d90e      	bls.n	8001578 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	22ff      	movs	r2, #255	@ 0xff
 800155e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001564:	b2da      	uxtb	r2, r3
 8001566:	8979      	ldrh	r1, [r7, #10]
 8001568:	2300      	movs	r3, #0
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 fc2b 	bl	8001dcc <I2C_TransferConfig>
 8001576:	e00f      	b.n	8001598 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800157c:	b29a      	uxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001586:	b2da      	uxtb	r2, r3
 8001588:	8979      	ldrh	r1, [r7, #10]
 800158a:	2300      	movs	r3, #0
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 fc1a 	bl	8001dcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 faad 	bl	8001afc <I2C_WaitOnTXISFlagUntilTimeout>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e07b      	b.n	80016a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	3b01      	subs	r3, #1
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d034      	beq.n	8001650 <HAL_I2C_Mem_Write+0x1c8>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d130      	bne.n	8001650 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f4:	2200      	movs	r2, #0
 80015f6:	2180      	movs	r1, #128	@ 0x80
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f000 fa3f 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e04d      	b.n	80016a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800160c:	b29b      	uxth	r3, r3
 800160e:	2bff      	cmp	r3, #255	@ 0xff
 8001610:	d90e      	bls.n	8001630 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	22ff      	movs	r2, #255	@ 0xff
 8001616:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800161c:	b2da      	uxtb	r2, r3
 800161e:	8979      	ldrh	r1, [r7, #10]
 8001620:	2300      	movs	r3, #0
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 fbcf 	bl	8001dcc <I2C_TransferConfig>
 800162e:	e00f      	b.n	8001650 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001634:	b29a      	uxth	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800163e:	b2da      	uxtb	r2, r3
 8001640:	8979      	ldrh	r1, [r7, #10]
 8001642:	2300      	movs	r3, #0
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 fbbe 	bl	8001dcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001654:	b29b      	uxth	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d19e      	bne.n	8001598 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 fa8c 	bl	8001b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e01a      	b.n	80016a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2220      	movs	r2, #32
 8001674:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6859      	ldr	r1, [r3, #4]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_I2C_Mem_Write+0x224>)
 8001682:	400b      	ands	r3, r1
 8001684:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80016a2:	2302      	movs	r3, #2
  }
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	fe00e800 	.word	0xfe00e800

080016b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	4608      	mov	r0, r1
 80016ba:	4611      	mov	r1, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	817b      	strh	r3, [r7, #10]
 80016c2:	460b      	mov	r3, r1
 80016c4:	813b      	strh	r3, [r7, #8]
 80016c6:	4613      	mov	r3, r2
 80016c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b20      	cmp	r3, #32
 80016d4:	f040 80fd 	bne.w	80018d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <HAL_I2C_Mem_Read+0x34>
 80016de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0f1      	b.n	80018d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_I2C_Mem_Read+0x4e>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e0ea      	b.n	80018d4 <HAL_I2C_Mem_Read+0x224>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001706:	f7ff faad 	bl	8000c64 <HAL_GetTick>
 800170a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2319      	movs	r3, #25
 8001712:	2201      	movs	r2, #1
 8001714:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f9af 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0d5      	b.n	80018d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2222      	movs	r2, #34	@ 0x22
 800172c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2240      	movs	r2, #64	@ 0x40
 8001734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a3a      	ldr	r2, [r7, #32]
 8001742:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001748:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001750:	88f8      	ldrh	r0, [r7, #6]
 8001752:	893a      	ldrh	r2, [r7, #8]
 8001754:	8979      	ldrh	r1, [r7, #10]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	4603      	mov	r3, r0
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f913 	bl	800198c <I2C_RequestMemoryRead>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0ad      	b.n	80018d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800177c:	b29b      	uxth	r3, r3
 800177e:	2bff      	cmp	r3, #255	@ 0xff
 8001780:	d90e      	bls.n	80017a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	22ff      	movs	r2, #255	@ 0xff
 8001786:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800178c:	b2da      	uxtb	r2, r3
 800178e:	8979      	ldrh	r1, [r7, #10]
 8001790:	4b52      	ldr	r3, [pc, #328]	@ (80018dc <HAL_I2C_Mem_Read+0x22c>)
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 fb17 	bl	8001dcc <I2C_TransferConfig>
 800179e:	e00f      	b.n	80017c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	8979      	ldrh	r1, [r7, #10]
 80017b2:	4b4a      	ldr	r3, [pc, #296]	@ (80018dc <HAL_I2C_Mem_Read+0x22c>)
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 fb06 	bl	8001dcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c6:	2200      	movs	r2, #0
 80017c8:	2104      	movs	r1, #4
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f956 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07c      	b.n	80018d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001802:	b29b      	uxth	r3, r3
 8001804:	3b01      	subs	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d034      	beq.n	8001880 <HAL_I2C_Mem_Read+0x1d0>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800181a:	2b00      	cmp	r3, #0
 800181c:	d130      	bne.n	8001880 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001824:	2200      	movs	r2, #0
 8001826:	2180      	movs	r1, #128	@ 0x80
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 f927 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e04d      	b.n	80018d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183c:	b29b      	uxth	r3, r3
 800183e:	2bff      	cmp	r3, #255	@ 0xff
 8001840:	d90e      	bls.n	8001860 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	22ff      	movs	r2, #255	@ 0xff
 8001846:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800184c:	b2da      	uxtb	r2, r3
 800184e:	8979      	ldrh	r1, [r7, #10]
 8001850:	2300      	movs	r3, #0
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 fab7 	bl	8001dcc <I2C_TransferConfig>
 800185e:	e00f      	b.n	8001880 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800186e:	b2da      	uxtb	r2, r3
 8001870:	8979      	ldrh	r1, [r7, #10]
 8001872:	2300      	movs	r3, #0
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 faa6 	bl	8001dcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d19a      	bne.n	80017c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f974 	bl	8001b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e01a      	b.n	80018d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2220      	movs	r2, #32
 80018a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_I2C_Mem_Read+0x230>)
 80018b2:	400b      	ands	r3, r1
 80018b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2220      	movs	r2, #32
 80018ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80018d2:	2302      	movs	r3, #2
  }
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	80002400 	.word	0x80002400
 80018e0:	fe00e800 	.word	0xfe00e800

080018e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	4608      	mov	r0, r1
 80018ee:	4611      	mov	r1, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	817b      	strh	r3, [r7, #10]
 80018f6:	460b      	mov	r3, r1
 80018f8:	813b      	strh	r3, [r7, #8]
 80018fa:	4613      	mov	r3, r2
 80018fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	8979      	ldrh	r1, [r7, #10]
 8001904:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <I2C_RequestMemoryWrite+0xa4>)
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 fa5d 	bl	8001dcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	69b9      	ldr	r1, [r7, #24]
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f8f0 	bl	8001afc <I2C_WaitOnTXISFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e02c      	b.n	8001980 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800192c:	893b      	ldrh	r3, [r7, #8]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	629a      	str	r2, [r3, #40]	@ 0x28
 8001936:	e015      	b.n	8001964 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001938:	893b      	ldrh	r3, [r7, #8]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	b29b      	uxth	r3, r3
 800193e:	b2da      	uxtb	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	69b9      	ldr	r1, [r7, #24]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 f8d6 	bl	8001afc <I2C_WaitOnTXISFlagUntilTimeout>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e012      	b.n	8001980 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800195a:	893b      	ldrh	r3, [r7, #8]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2200      	movs	r2, #0
 800196c:	2180      	movs	r1, #128	@ 0x80
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f884 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	80002000 	.word	0x80002000

0800198c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af02      	add	r7, sp, #8
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	4608      	mov	r0, r1
 8001996:	4611      	mov	r1, r2
 8001998:	461a      	mov	r2, r3
 800199a:	4603      	mov	r3, r0
 800199c:	817b      	strh	r3, [r7, #10]
 800199e:	460b      	mov	r3, r1
 80019a0:	813b      	strh	r3, [r7, #8]
 80019a2:	4613      	mov	r3, r2
 80019a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	8979      	ldrh	r1, [r7, #10]
 80019ac:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <I2C_RequestMemoryRead+0xa4>)
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2300      	movs	r3, #0
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 fa0a 	bl	8001dcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	69b9      	ldr	r1, [r7, #24]
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 f89d 	bl	8001afc <I2C_WaitOnTXISFlagUntilTimeout>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e02c      	b.n	8001a26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d105      	bne.n	80019de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019d2:	893b      	ldrh	r3, [r7, #8]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	629a      	str	r2, [r3, #40]	@ 0x28
 80019dc:	e015      	b.n	8001a0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019de:	893b      	ldrh	r3, [r7, #8]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	69b9      	ldr	r1, [r7, #24]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f883 	bl	8001afc <I2C_WaitOnTXISFlagUntilTimeout>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e012      	b.n	8001a26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a00:	893b      	ldrh	r3, [r7, #8]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	2200      	movs	r2, #0
 8001a12:	2140      	movs	r1, #64	@ 0x40
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f831 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	80002000 	.word	0x80002000

08001a34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d103      	bne.n	8001a52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d007      	beq.n	8001a70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	619a      	str	r2, [r3, #24]
  }
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a8c:	e022      	b.n	8001ad4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d01e      	beq.n	8001ad4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a96:	f7ff f8e5 	bl	8000c64 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d302      	bcc.n	8001aac <I2C_WaitOnFlagUntilTimeout+0x30>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d113      	bne.n	8001ad4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e00f      	b.n	8001af4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699a      	ldr	r2, [r3, #24]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	4013      	ands	r3, r2
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d0cd      	beq.n	8001a8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b08:	e02c      	b.n	8001b64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f870 	bl	8001bf4 <I2C_IsErrorOccurred>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e02a      	b.n	8001b74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d01e      	beq.n	8001b64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b26:	f7ff f89d 	bl	8000c64 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d302      	bcc.n	8001b3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d113      	bne.n	8001b64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e007      	b.n	8001b74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d1cb      	bne.n	8001b0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b88:	e028      	b.n	8001bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f830 	bl	8001bf4 <I2C_IsErrorOccurred>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e026      	b.n	8001bec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b9e:	f7ff f861 	bl	8000c64 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d302      	bcc.n	8001bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d113      	bne.n	8001bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb8:	f043 0220 	orr.w	r2, r3, #32
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e007      	b.n	8001bec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d1cf      	bne.n	8001b8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	@ 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d075      	beq.n	8001d0c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2210      	movs	r2, #16
 8001c26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c28:	e056      	b.n	8001cd8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c30:	d052      	beq.n	8001cd8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c32:	f7ff f817 	bl	8000c64 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d302      	bcc.n	8001c48 <I2C_IsErrorOccurred+0x54>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d147      	bne.n	8001cd8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c6a:	d12e      	bne.n	8001cca <I2C_IsErrorOccurred+0xd6>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c72:	d02a      	beq.n	8001cca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001c74:	7cfb      	ldrb	r3, [r7, #19]
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d027      	beq.n	8001cca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c8a:	f7fe ffeb 	bl	8000c64 <HAL_GetTick>
 8001c8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c90:	e01b      	b.n	8001cca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c92:	f7fe ffe7 	bl	8000c64 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b19      	cmp	r3, #25
 8001c9e:	d914      	bls.n	8001cca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca4:	f043 0220 	orr.w	r2, r3, #32
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

              status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b20      	cmp	r3, #32
 8001cd6:	d1dc      	bne.n	8001c92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d003      	beq.n	8001cee <I2C_IsErrorOccurred+0xfa>
 8001ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d09d      	beq.n	8001c2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d103      	bne.n	8001cfe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00b      	beq.n	8001d58 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	f043 0308 	orr.w	r3, r3, #8
 8001d46:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01c      	beq.n	8001dbc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff fe56 	bl	8001a34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6859      	ldr	r1, [r3, #4]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <I2C_IsErrorOccurred+0x1d4>)
 8001d94:	400b      	ands	r3, r1
 8001d96:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3728      	adds	r7, #40	@ 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	fe00e800 	.word	0xfe00e800

08001dcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	817b      	strh	r3, [r7, #10]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dde:	897b      	ldrh	r3, [r7, #10]
 8001de0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001de4:	7a7b      	ldrb	r3, [r7, #9]
 8001de6:	041b      	lsls	r3, r3, #16
 8001de8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dfa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	0d5b      	lsrs	r3, r3, #21
 8001e06:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001e0a:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <I2C_TransferConfig+0x60>)
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	ea02 0103 	and.w	r1, r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e1e:	bf00      	nop
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	03ff63ff 	.word	0x03ff63ff

08001e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d138      	bne.n	8001eb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e032      	b.n	8001eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
  }
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d139      	bne.n	8001f50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e033      	b.n	8001f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2224      	movs	r2, #36	@ 0x24
 8001ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f50:	2302      	movs	r3, #2
  }
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40007000 	.word	0x40007000

08001f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f8a:	d130      	bne.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f8c:	4b23      	ldr	r3, [pc, #140]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f98:	d038      	beq.n	800200c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f9a:	4b20      	ldr	r3, [pc, #128]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001faa:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2232      	movs	r2, #50	@ 0x32
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0c9b      	lsrs	r3, r3, #18
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc0:	e002      	b.n	8001fc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc8:	4b14      	ldr	r3, [pc, #80]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd4:	d102      	bne.n	8001fdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f2      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe8:	d110      	bne.n	800200c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e00f      	b.n	800200e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fee:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffa:	d007      	beq.n	800200c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ffc:	4b07      	ldr	r3, [pc, #28]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002004:	4a05      	ldr	r2, [pc, #20]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800200a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40007000 	.word	0x40007000
 8002020:	20000000 	.word	0x20000000
 8002024:	431bde83 	.word	0x431bde83

08002028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e3ca      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203a:	4b97      	ldr	r3, [pc, #604]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002044:	4b94      	ldr	r3, [pc, #592]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80e4 	beq.w	8002224 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_RCC_OscConfig+0x4a>
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	f040 808b 	bne.w	8002180 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b01      	cmp	r3, #1
 800206e:	f040 8087 	bne.w	8002180 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002072:	4b89      	ldr	r3, [pc, #548]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_RCC_OscConfig+0x62>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e3a2      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1a      	ldr	r2, [r3, #32]
 800208e:	4b82      	ldr	r3, [pc, #520]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <HAL_RCC_OscConfig+0x7c>
 800209a:	4b7f      	ldr	r3, [pc, #508]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020a2:	e005      	b.n	80020b0 <HAL_RCC_OscConfig+0x88>
 80020a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d223      	bcs.n	80020fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fd53 	bl	8002b64 <RCC_SetFlashLatencyFromMSIRange>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e383      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c8:	4b73      	ldr	r3, [pc, #460]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a72      	ldr	r2, [pc, #456]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b70      	ldr	r3, [pc, #448]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	496d      	ldr	r1, [pc, #436]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	4968      	ldr	r1, [pc, #416]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
 80020fa:	e025      	b.n	8002148 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020fc:	4b66      	ldr	r3, [pc, #408]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a65      	ldr	r2, [pc, #404]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b63      	ldr	r3, [pc, #396]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4960      	ldr	r1, [pc, #384]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211a:	4b5f      	ldr	r3, [pc, #380]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	495b      	ldr	r1, [pc, #364]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fd13 	bl	8002b64 <RCC_SetFlashLatencyFromMSIRange>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e343      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002148:	f000 fc4a 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b52      	ldr	r3, [pc, #328]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	4950      	ldr	r1, [pc, #320]	@ (800229c <HAL_RCC_OscConfig+0x274>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	4a4e      	ldr	r2, [pc, #312]	@ (80022a0 <HAL_RCC_OscConfig+0x278>)
 8002166:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002168:	4b4e      	ldr	r3, [pc, #312]	@ (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fd29 	bl	8000bc4 <HAL_InitTick>
 8002172:	4603      	mov	r3, r0
 8002174:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d052      	beq.n	8002222 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	e327      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d032      	beq.n	80021ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002188:	4b43      	ldr	r3, [pc, #268]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a42      	ldr	r2, [pc, #264]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002194:	f7fe fd66 	bl	8000c64 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800219c:	f7fe fd62 	bl	8000c64 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e310      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ba:	4b37      	ldr	r3, [pc, #220]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a36      	ldr	r2, [pc, #216]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b34      	ldr	r3, [pc, #208]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4931      	ldr	r1, [pc, #196]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	492c      	ldr	r1, [pc, #176]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	e01a      	b.n	8002224 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a29      	ldr	r2, [pc, #164]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021fa:	f7fe fd33 	bl	8000c64 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002202:	f7fe fd2f 	bl	8000c64 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e2dd      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002214:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x1da>
 8002220:	e000      	b.n	8002224 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002222:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d074      	beq.n	800231a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b08      	cmp	r3, #8
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x21a>
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b0c      	cmp	r3, #12
 800223a:	d10e      	bne.n	800225a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d10b      	bne.n	800225a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d064      	beq.n	8002318 <HAL_RCC_OscConfig+0x2f0>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d160      	bne.n	8002318 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e2ba      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x24a>
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0b      	ldr	r2, [pc, #44]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e026      	b.n	80022c0 <HAL_RCC_OscConfig+0x298>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800227a:	d115      	bne.n	80022a8 <HAL_RCC_OscConfig+0x280>
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 8002282:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a02      	ldr	r2, [pc, #8]	@ (8002298 <HAL_RCC_OscConfig+0x270>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x298>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	080047fc 	.word	0x080047fc
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000004 	.word	0x20000004
 80022a8:	4ba0      	ldr	r3, [pc, #640]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a9f      	ldr	r2, [pc, #636]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b9d      	ldr	r3, [pc, #628]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a9c      	ldr	r2, [pc, #624]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fccc 	bl	8000c64 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe fcc8 	bl	8000c64 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	@ 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e276      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e2:	4b92      	ldr	r3, [pc, #584]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x2a8>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe fcb8 	bl	8000c64 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe fcb4 	bl	8000c64 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	@ 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e262      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230a:	4b88      	ldr	r3, [pc, #544]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x2d0>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d060      	beq.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d005      	beq.n	8002338 <HAL_RCC_OscConfig+0x310>
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d119      	bne.n	8002366 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d116      	bne.n	8002366 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002338:	4b7c      	ldr	r3, [pc, #496]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_OscConfig+0x328>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e23f      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b76      	ldr	r3, [pc, #472]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	4973      	ldr	r1, [pc, #460]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002364:	e040      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d023      	beq.n	80023b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236e:	4b6f      	ldr	r3, [pc, #444]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6e      	ldr	r2, [pc, #440]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe fc73 	bl	8000c64 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7fe fc6f 	bl	8000c64 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e21d      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002394:	4b65      	ldr	r3, [pc, #404]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	4b62      	ldr	r3, [pc, #392]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	495f      	ldr	r1, [pc, #380]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
 80023b4:	e018      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b6:	4b5d      	ldr	r3, [pc, #372]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a5c      	ldr	r2, [pc, #368]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80023bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c2:	f7fe fc4f 	bl	8000c64 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ca:	f7fe fc4b 	bl	8000c64 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e1f9      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023dc:	4b53      	ldr	r3, [pc, #332]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f0      	bne.n	80023ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d03c      	beq.n	800246e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01c      	beq.n	8002436 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fc:	4b4b      	ldr	r3, [pc, #300]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002402:	4a4a      	ldr	r2, [pc, #296]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7fe fc2a 	bl	8000c64 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7fe fc26 	bl	8000c64 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1d4      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002426:	4b41      	ldr	r3, [pc, #260]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ef      	beq.n	8002414 <HAL_RCC_OscConfig+0x3ec>
 8002434:	e01b      	b.n	800246e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002436:	4b3d      	ldr	r3, [pc, #244]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243c:	4a3b      	ldr	r2, [pc, #236]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe fc0d 	bl	8000c64 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7fe fc09 	bl	8000c64 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1b7      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002460:	4b32      	ldr	r3, [pc, #200]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1ef      	bne.n	800244e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80a6 	beq.w	80025c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002480:	4b2a      	ldr	r3, [pc, #168]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10d      	bne.n	80024a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	4b27      	ldr	r3, [pc, #156]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002490:	4a26      	ldr	r2, [pc, #152]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002496:	6593      	str	r3, [r2, #88]	@ 0x58
 8002498:	4b24      	ldr	r3, [pc, #144]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a4:	2301      	movs	r3, #1
 80024a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a8:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <HAL_RCC_OscConfig+0x508>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d118      	bne.n	80024e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002530 <HAL_RCC_OscConfig+0x508>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002530 <HAL_RCC_OscConfig+0x508>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c0:	f7fe fbd0 	bl	8000c64 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c8:	f7fe fbcc 	bl	8000c64 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e17a      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024da:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <HAL_RCC_OscConfig+0x508>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <HAL_RCC_OscConfig+0x4d8>
 80024ee:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f4:	4a0d      	ldr	r2, [pc, #52]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024fe:	e029      	b.n	8002554 <HAL_RCC_OscConfig+0x52c>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d115      	bne.n	8002534 <HAL_RCC_OscConfig+0x50c>
 8002508:	4b08      	ldr	r3, [pc, #32]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250e:	4a07      	ldr	r2, [pc, #28]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002518:	4b04      	ldr	r3, [pc, #16]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251e:	4a03      	ldr	r2, [pc, #12]	@ (800252c <HAL_RCC_OscConfig+0x504>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002528:	e014      	b.n	8002554 <HAL_RCC_OscConfig+0x52c>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
 8002534:	4b9c      	ldr	r3, [pc, #624]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253a:	4a9b      	ldr	r2, [pc, #620]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002544:	4b98      	ldr	r3, [pc, #608]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254a:	4a97      	ldr	r2, [pc, #604]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d016      	beq.n	800258a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7fe fb82 	bl	8000c64 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002562:	e00a      	b.n	800257a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7fe fb7e 	bl	8000c64 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e12a      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257a:	4b8b      	ldr	r3, [pc, #556]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ed      	beq.n	8002564 <HAL_RCC_OscConfig+0x53c>
 8002588:	e015      	b.n	80025b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fe fb6b 	bl	8000c64 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fb67 	bl	8000c64 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e113      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a8:	4b7f      	ldr	r3, [pc, #508]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ed      	bne.n	8002592 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b6:	7ffb      	ldrb	r3, [r7, #31]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b7a      	ldr	r3, [pc, #488]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	4a79      	ldr	r2, [pc, #484]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80025c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80fe 	beq.w	80027ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	f040 80d0 	bne.w	800277c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025dc:	4b72      	ldr	r3, [pc, #456]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d130      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	3b01      	subs	r3, #1
 80025fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d127      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d11f      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800261c:	2a07      	cmp	r2, #7
 800261e:	bf14      	ite	ne
 8002620:	2201      	movne	r2, #1
 8002622:	2200      	moveq	r2, #0
 8002624:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002626:	4293      	cmp	r3, r2
 8002628:	d113      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002634:	085b      	lsrs	r3, r3, #1
 8002636:	3b01      	subs	r3, #1
 8002638:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d109      	bne.n	8002652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	3b01      	subs	r3, #1
 800264c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d06e      	beq.n	8002730 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d069      	beq.n	800272c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002658:	4b53      	ldr	r3, [pc, #332]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002664:	4b50      	ldr	r3, [pc, #320]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0ad      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002674:	4b4c      	ldr	r3, [pc, #304]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a4b      	ldr	r2, [pc, #300]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800267a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800267e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002680:	f7fe faf0 	bl	8000c64 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe faec 	bl	8000c64 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e09a      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269a:	4b43      	ldr	r3, [pc, #268]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a6:	4b40      	ldr	r3, [pc, #256]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4b40      	ldr	r3, [pc, #256]	@ (80027ac <HAL_RCC_OscConfig+0x784>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026b6:	3a01      	subs	r2, #1
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	4311      	orrs	r1, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026c0:	0212      	lsls	r2, r2, #8
 80026c2:	4311      	orrs	r1, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026c8:	0852      	lsrs	r2, r2, #1
 80026ca:	3a01      	subs	r2, #1
 80026cc:	0552      	lsls	r2, r2, #21
 80026ce:	4311      	orrs	r1, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026d4:	0852      	lsrs	r2, r2, #1
 80026d6:	3a01      	subs	r2, #1
 80026d8:	0652      	lsls	r2, r2, #25
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026e0:	0912      	lsrs	r2, r2, #4
 80026e2:	0452      	lsls	r2, r2, #17
 80026e4:	430a      	orrs	r2, r1
 80026e6:	4930      	ldr	r1, [pc, #192]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026ec:	4b2e      	ldr	r3, [pc, #184]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2d      	ldr	r2, [pc, #180]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026f8:	4b2b      	ldr	r3, [pc, #172]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a2a      	ldr	r2, [pc, #168]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 80026fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002704:	f7fe faae 	bl	8000c64 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7fe faaa 	bl	8000c64 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e058      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271e:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800272a:	e050      	b.n	80027ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e04f      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002730:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d148      	bne.n	80027ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a19      	ldr	r2, [pc, #100]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002746:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002748:	4b17      	ldr	r3, [pc, #92]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a16      	ldr	r2, [pc, #88]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 800274e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002752:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002754:	f7fe fa86 	bl	8000c64 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fa82 	bl	8000c64 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e030      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x734>
 800277a:	e028      	b.n	80027ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b0c      	cmp	r3, #12
 8002780:	d023      	beq.n	80027ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a08      	ldr	r2, [pc, #32]	@ (80027a8 <HAL_RCC_OscConfig+0x780>)
 8002788:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800278c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fa69 	bl	8000c64 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002794:	e00c      	b.n	80027b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7fe fa65 	bl	8000c64 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d905      	bls.n	80027b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e013      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
 80027a8:	40021000 	.word	0x40021000
 80027ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b0:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <HAL_RCC_OscConfig+0x7b0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ec      	bne.n	8002796 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_RCC_OscConfig+0x7b0>)
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	4905      	ldr	r1, [pc, #20]	@ (80027d8 <HAL_RCC_OscConfig+0x7b0>)
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_RCC_OscConfig+0x7b4>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	60cb      	str	r3, [r1, #12]
 80027c8:	e001      	b.n	80027ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	feeefffc 	.word	0xfeeefffc

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0e7      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b75      	ldr	r3, [pc, #468]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d910      	bls.n	8002824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b72      	ldr	r3, [pc, #456]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 0207 	bic.w	r2, r3, #7
 800280a:	4970      	ldr	r1, [pc, #448]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b6e      	ldr	r3, [pc, #440]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0cf      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d010      	beq.n	8002852 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	4b66      	ldr	r3, [pc, #408]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800283c:	429a      	cmp	r2, r3
 800283e:	d908      	bls.n	8002852 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b63      	ldr	r3, [pc, #396]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4960      	ldr	r1, [pc, #384]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d04c      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	4b5a      	ldr	r3, [pc, #360]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d121      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0a6      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800287e:	4b54      	ldr	r3, [pc, #336]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d115      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e09a      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002896:	4b4e      	ldr	r3, [pc, #312]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e08e      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a6:	4b4a      	ldr	r3, [pc, #296]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e086      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028b6:	4b46      	ldr	r3, [pc, #280]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4943      	ldr	r1, [pc, #268]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c8:	f7fe f9cc 	bl	8000c64 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7fe f9c8 	bl	8000c64 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e06e      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b3a      	ldr	r3, [pc, #232]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 020c 	and.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1eb      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d010      	beq.n	8002926 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	4b31      	ldr	r3, [pc, #196]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002910:	429a      	cmp	r2, r3
 8002912:	d208      	bcs.n	8002926 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4b2e      	ldr	r3, [pc, #184]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	492b      	ldr	r1, [pc, #172]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002926:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d210      	bcs.n	8002956 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002934:	4b25      	ldr	r3, [pc, #148]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 0207 	bic.w	r2, r3, #7
 800293c:	4923      	ldr	r1, [pc, #140]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002944:	4b21      	ldr	r3, [pc, #132]	@ (80029cc <HAL_RCC_ClockConfig+0x1ec>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d001      	beq.n	8002956 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e036      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d008      	beq.n	8002974 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002962:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4918      	ldr	r1, [pc, #96]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	4313      	orrs	r3, r2
 8002972:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002980:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4910      	ldr	r1, [pc, #64]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002994:	f000 f824 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b0d      	ldr	r3, [pc, #52]	@ (80029d0 <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	490b      	ldr	r1, [pc, #44]	@ (80029d4 <HAL_RCC_ClockConfig+0x1f4>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
 80029b0:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <HAL_RCC_ClockConfig+0x1f8>)
 80029b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029b4:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <HAL_RCC_ClockConfig+0x1fc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe f903 	bl	8000bc4 <HAL_InitTick>
 80029be:	4603      	mov	r3, r0
 80029c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80029c2:	7afb      	ldrb	r3, [r7, #11]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40021000 	.word	0x40021000
 80029d4:	080047fc 	.word	0x080047fc
 80029d8:	20000000 	.word	0x20000000
 80029dc:	20000004 	.word	0x20000004

080029e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	@ 0x24
 80029e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ee:	4b3e      	ldr	r3, [pc, #248]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x34>
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b0c      	cmp	r3, #12
 8002a0c:	d121      	bne.n	8002a52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d11e      	bne.n	8002a52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a14:	4b34      	ldr	r3, [pc, #208]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a20:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	e005      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10d      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d102      	bne.n	8002a5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	e004      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a64:	4b22      	ldr	r3, [pc, #136]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	d134      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d003      	beq.n	8002a86 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d003      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0xac>
 8002a84:	e005      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a88:	617b      	str	r3, [r7, #20]
      break;
 8002a8a:	e005      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a8e:	617b      	str	r3, [r7, #20]
      break;
 8002a90:	e002      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	617b      	str	r3, [r7, #20]
      break;
 8002a96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a98:	4b13      	ldr	r3, [pc, #76]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aa6:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	fb03 f202 	mul.w	r2, r3, r2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002abe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	0e5b      	lsrs	r3, r3, #25
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	@ 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08004814 	.word	0x08004814
 8002af0:	00f42400 	.word	0x00f42400

08002af4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af8:	4b03      	ldr	r3, [pc, #12]	@ (8002b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000000 	.word	0x20000000

08002b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b10:	f7ff fff0 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	4904      	ldr	r1, [pc, #16]	@ (8002b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	0800480c 	.word	0x0800480c

08002b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b3c:	f7ff ffda 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b40:	4602      	mov	r2, r0
 8002b42:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	0adb      	lsrs	r3, r3, #11
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	4904      	ldr	r1, [pc, #16]	@ (8002b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b4e:	5ccb      	ldrb	r3, [r1, r3]
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	0800480c 	.word	0x0800480c

08002b64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b70:	4b2a      	ldr	r3, [pc, #168]	@ (8002c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b7c:	f7ff f9f0 	bl	8001f60 <HAL_PWREx_GetVoltageRange>
 8002b80:	6178      	str	r0, [r7, #20]
 8002b82:	e014      	b.n	8002bae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b84:	4b25      	ldr	r3, [pc, #148]	@ (8002c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	4a24      	ldr	r2, [pc, #144]	@ (8002c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b90:	4b22      	ldr	r3, [pc, #136]	@ (8002c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b9c:	f7ff f9e0 	bl	8001f60 <HAL_PWREx_GetVoltageRange>
 8002ba0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bb4:	d10b      	bne.n	8002bce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b80      	cmp	r3, #128	@ 0x80
 8002bba:	d919      	bls.n	8002bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2ba0      	cmp	r3, #160	@ 0xa0
 8002bc0:	d902      	bls.n	8002bc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	e013      	b.n	8002bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bc8:	2301      	movs	r3, #1
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e010      	b.n	8002bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b80      	cmp	r3, #128	@ 0x80
 8002bd2:	d902      	bls.n	8002bda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	e00a      	b.n	8002bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b80      	cmp	r3, #128	@ 0x80
 8002bde:	d102      	bne.n	8002be6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002be0:	2302      	movs	r3, #2
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	e004      	b.n	8002bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b70      	cmp	r3, #112	@ 0x70
 8002bea:	d101      	bne.n	8002bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bec:	2301      	movs	r3, #1
 8002bee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f023 0207 	bic.w	r2, r3, #7
 8002bf8:	4909      	ldr	r1, [pc, #36]	@ (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c00:	4b07      	ldr	r3, [pc, #28]	@ (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d001      	beq.n	8002c12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40022000 	.word	0x40022000

08002c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c30:	2300      	movs	r3, #0
 8002c32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d041      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c48:	d02a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c4a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c4e:	d824      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c54:	d008      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c5a:	d81e      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c64:	d010      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c66:	e018      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c68:	4b86      	ldr	r3, [pc, #536]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a85      	ldr	r2, [pc, #532]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c74:	e015      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fabb 	bl	80031f8 <RCCEx_PLLSAI1_Config>
 8002c82:	4603      	mov	r3, r0
 8002c84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c86:	e00c      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3320      	adds	r3, #32
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fba6 	bl	80033e0 <RCCEx_PLLSAI2_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c98:	e003      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca2:	7cfb      	ldrb	r3, [r7, #19]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca8:	4b76      	ldr	r3, [pc, #472]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cb6:	4973      	ldr	r1, [pc, #460]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002cbe:	e001      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d041      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cd8:	d02a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cde:	d824      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ce0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ce6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cea:	d81e      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cf4:	d010      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cf6:	e018      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cf8:	4b62      	ldr	r3, [pc, #392]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a61      	ldr	r2, [pc, #388]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d04:	e015      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fa73 	bl	80031f8 <RCCEx_PLLSAI1_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d16:	e00c      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3320      	adds	r3, #32
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fb5e 	bl	80033e0 <RCCEx_PLLSAI2_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d28:	e003      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d2e:	e000      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d38:	4b52      	ldr	r3, [pc, #328]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d46:	494f      	ldr	r1, [pc, #316]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d4e:	e001      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a0 	beq.w	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d66:	4b47      	ldr	r3, [pc, #284]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b41      	ldr	r3, [pc, #260]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	4a40      	ldr	r2, [pc, #256]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d88:	4b3e      	ldr	r3, [pc, #248]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d94:	2301      	movs	r3, #1
 8002d96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d98:	4b3b      	ldr	r3, [pc, #236]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002da4:	f7fd ff5e 	bl	8000c64 <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002daa:	e009      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dac:	f7fd ff5a 	bl	8000c64 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d902      	bls.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	74fb      	strb	r3, [r7, #19]
        break;
 8002dbe:	e005      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dc0:	4b31      	ldr	r3, [pc, #196]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ef      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d15c      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ddc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01f      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d019      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002df0:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dfc:	4b21      	ldr	r3, [pc, #132]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e02:	4a20      	ldr	r2, [pc, #128]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e12:	4a1c      	ldr	r2, [pc, #112]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e1c:	4a19      	ldr	r2, [pc, #100]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7fd ff19 	bl	8000c64 <HAL_GetTick>
 8002e32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e34:	e00b      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fd ff15 	bl	8000c64 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d902      	bls.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	74fb      	strb	r3, [r7, #19]
            break;
 8002e4c:	e006      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ec      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e62:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e72:	4904      	ldr	r1, [pc, #16]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e7a:	e009      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	74bb      	strb	r3, [r7, #18]
 8002e80:	e006      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e90:	7c7b      	ldrb	r3, [r7, #17]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e96:	4b9e      	ldr	r3, [pc, #632]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9a:	4a9d      	ldr	r2, [pc, #628]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eae:	4b98      	ldr	r3, [pc, #608]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb4:	f023 0203 	bic.w	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebc:	4994      	ldr	r1, [pc, #592]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ed0:	4b8f      	ldr	r3, [pc, #572]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed6:	f023 020c 	bic.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ede:	498c      	ldr	r1, [pc, #560]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ef2:	4b87      	ldr	r3, [pc, #540]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	4983      	ldr	r1, [pc, #524]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f14:	4b7e      	ldr	r3, [pc, #504]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f22:	497b      	ldr	r1, [pc, #492]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f36:	4b76      	ldr	r3, [pc, #472]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f44:	4972      	ldr	r1, [pc, #456]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f58:	4b6d      	ldr	r3, [pc, #436]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f66:	496a      	ldr	r1, [pc, #424]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f7a:	4b65      	ldr	r3, [pc, #404]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f88:	4961      	ldr	r1, [pc, #388]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f9c:	4b5c      	ldr	r3, [pc, #368]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002faa:	4959      	ldr	r1, [pc, #356]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fbe:	4b54      	ldr	r3, [pc, #336]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fcc:	4950      	ldr	r1, [pc, #320]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fee:	4948      	ldr	r1, [pc, #288]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003002:	4b43      	ldr	r3, [pc, #268]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003008:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003010:	493f      	ldr	r1, [pc, #252]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d028      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003024:	4b3a      	ldr	r3, [pc, #232]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003032:	4937      	ldr	r1, [pc, #220]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800303e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003042:	d106      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003044:	4b32      	ldr	r3, [pc, #200]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a31      	ldr	r2, [pc, #196]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800304e:	60d3      	str	r3, [r2, #12]
 8003050:	e011      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003056:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800305a:	d10c      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	2101      	movs	r1, #1
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f8c8 	bl	80031f8 <RCCEx_PLLSAI1_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800306c:	7cfb      	ldrb	r3, [r7, #19]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003072:	7cfb      	ldrb	r3, [r7, #19]
 8003074:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d028      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003082:	4b23      	ldr	r3, [pc, #140]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003088:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003090:	491f      	ldr	r1, [pc, #124]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030a0:	d106      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ac:	60d3      	str	r3, [r2, #12]
 80030ae:	e011      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3304      	adds	r3, #4
 80030be:	2101      	movs	r1, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f899 	bl	80031f8 <RCCEx_PLLSAI1_Config>
 80030c6:	4603      	mov	r3, r0
 80030c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ca:	7cfb      	ldrb	r3, [r7, #19]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d02b      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ee:	4908      	ldr	r1, [pc, #32]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030fe:	d109      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003100:	4b03      	ldr	r3, [pc, #12]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a02      	ldr	r2, [pc, #8]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800310a:	60d3      	str	r3, [r2, #12]
 800310c:	e014      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003118:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800311c:	d10c      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3304      	adds	r3, #4
 8003122:	2101      	movs	r1, #1
 8003124:	4618      	mov	r0, r3
 8003126:	f000 f867 	bl	80031f8 <RCCEx_PLLSAI1_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02f      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003144:	4b2b      	ldr	r3, [pc, #172]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003152:	4928      	ldr	r1, [pc, #160]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800315e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003162:	d10d      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3304      	adds	r3, #4
 8003168:	2102      	movs	r1, #2
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f844 	bl	80031f8 <RCCEx_PLLSAI1_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d014      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800317a:	7cfb      	ldrb	r3, [r7, #19]
 800317c:	74bb      	strb	r3, [r7, #18]
 800317e:	e011      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003188:	d10c      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3320      	adds	r3, #32
 800318e:	2102      	movs	r1, #2
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f925 	bl	80033e0 <RCCEx_PLLSAI2_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031b0:	4b10      	ldr	r3, [pc, #64]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031be:	490d      	ldr	r1, [pc, #52]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031d2:	4b08      	ldr	r3, [pc, #32]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031e2:	4904      	ldr	r1, [pc, #16]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000

080031f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003206:	4b75      	ldr	r3, [pc, #468]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d018      	beq.n	8003244 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003212:	4b72      	ldr	r3, [pc, #456]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0203 	and.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d10d      	bne.n	800323e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
       ||
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800322a:	4b6c      	ldr	r3, [pc, #432]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
       ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d047      	beq.n	80032ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	e044      	b.n	80032ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b03      	cmp	r3, #3
 800324a:	d018      	beq.n	800327e <RCCEx_PLLSAI1_Config+0x86>
 800324c:	2b03      	cmp	r3, #3
 800324e:	d825      	bhi.n	800329c <RCCEx_PLLSAI1_Config+0xa4>
 8003250:	2b01      	cmp	r3, #1
 8003252:	d002      	beq.n	800325a <RCCEx_PLLSAI1_Config+0x62>
 8003254:	2b02      	cmp	r3, #2
 8003256:	d009      	beq.n	800326c <RCCEx_PLLSAI1_Config+0x74>
 8003258:	e020      	b.n	800329c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800325a:	4b60      	ldr	r3, [pc, #384]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11d      	bne.n	80032a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800326a:	e01a      	b.n	80032a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800326c:	4b5b      	ldr	r3, [pc, #364]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003274:	2b00      	cmp	r3, #0
 8003276:	d116      	bne.n	80032a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800327c:	e013      	b.n	80032a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800327e:	4b57      	ldr	r3, [pc, #348]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10f      	bne.n	80032aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800328a:	4b54      	ldr	r3, [pc, #336]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800329a:	e006      	b.n	80032aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      break;
 80032a0:	e004      	b.n	80032ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032a2:	bf00      	nop
 80032a4:	e002      	b.n	80032ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032a6:	bf00      	nop
 80032a8:	e000      	b.n	80032ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10d      	bne.n	80032ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032b2:	4b4a      	ldr	r3, [pc, #296]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	430b      	orrs	r3, r1
 80032c8:	4944      	ldr	r1, [pc, #272]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d17d      	bne.n	80033d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032d4:	4b41      	ldr	r3, [pc, #260]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a40      	ldr	r2, [pc, #256]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e0:	f7fd fcc0 	bl	8000c64 <HAL_GetTick>
 80032e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032e6:	e009      	b.n	80032fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032e8:	f7fd fcbc 	bl	8000c64 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d902      	bls.n	80032fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	73fb      	strb	r3, [r7, #15]
        break;
 80032fa:	e005      	b.n	8003308 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032fc:	4b37      	ldr	r3, [pc, #220]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ef      	bne.n	80032e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d160      	bne.n	80033d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d111      	bne.n	8003338 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003314:	4b31      	ldr	r3, [pc, #196]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800331c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6892      	ldr	r2, [r2, #8]
 8003324:	0211      	lsls	r1, r2, #8
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68d2      	ldr	r2, [r2, #12]
 800332a:	0912      	lsrs	r2, r2, #4
 800332c:	0452      	lsls	r2, r2, #17
 800332e:	430a      	orrs	r2, r1
 8003330:	492a      	ldr	r1, [pc, #168]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003332:	4313      	orrs	r3, r2
 8003334:	610b      	str	r3, [r1, #16]
 8003336:	e027      	b.n	8003388 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d112      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800333e:	4b27      	ldr	r3, [pc, #156]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003346:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6892      	ldr	r2, [r2, #8]
 800334e:	0211      	lsls	r1, r2, #8
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6912      	ldr	r2, [r2, #16]
 8003354:	0852      	lsrs	r2, r2, #1
 8003356:	3a01      	subs	r2, #1
 8003358:	0552      	lsls	r2, r2, #21
 800335a:	430a      	orrs	r2, r1
 800335c:	491f      	ldr	r1, [pc, #124]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	610b      	str	r3, [r1, #16]
 8003362:	e011      	b.n	8003388 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003364:	4b1d      	ldr	r3, [pc, #116]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800336c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6892      	ldr	r2, [r2, #8]
 8003374:	0211      	lsls	r1, r2, #8
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6952      	ldr	r2, [r2, #20]
 800337a:	0852      	lsrs	r2, r2, #1
 800337c:	3a01      	subs	r2, #1
 800337e:	0652      	lsls	r2, r2, #25
 8003380:	430a      	orrs	r2, r1
 8003382:	4916      	ldr	r1, [pc, #88]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003384:	4313      	orrs	r3, r2
 8003386:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003388:	4b14      	ldr	r3, [pc, #80]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a13      	ldr	r2, [pc, #76]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800338e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003392:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fd fc66 	bl	8000c64 <HAL_GetTick>
 8003398:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800339a:	e009      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800339c:	f7fd fc62 	bl	8000c64 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d902      	bls.n	80033b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	73fb      	strb	r3, [r7, #15]
          break;
 80033ae:	e005      	b.n	80033bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033b0:	4b0a      	ldr	r3, [pc, #40]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ef      	beq.n	800339c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033c2:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	4904      	ldr	r1, [pc, #16]	@ (80033dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000

080033e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d018      	beq.n	800342c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033fa:	4b67      	ldr	r3, [pc, #412]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0203 	and.w	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d10d      	bne.n	8003426 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
       ||
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003412:	4b61      	ldr	r3, [pc, #388]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
       ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d047      	beq.n	80034b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
 800342a:	e044      	b.n	80034b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b03      	cmp	r3, #3
 8003432:	d018      	beq.n	8003466 <RCCEx_PLLSAI2_Config+0x86>
 8003434:	2b03      	cmp	r3, #3
 8003436:	d825      	bhi.n	8003484 <RCCEx_PLLSAI2_Config+0xa4>
 8003438:	2b01      	cmp	r3, #1
 800343a:	d002      	beq.n	8003442 <RCCEx_PLLSAI2_Config+0x62>
 800343c:	2b02      	cmp	r3, #2
 800343e:	d009      	beq.n	8003454 <RCCEx_PLLSAI2_Config+0x74>
 8003440:	e020      	b.n	8003484 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003442:	4b55      	ldr	r3, [pc, #340]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11d      	bne.n	800348a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003452:	e01a      	b.n	800348a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003454:	4b50      	ldr	r3, [pc, #320]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d116      	bne.n	800348e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003464:	e013      	b.n	800348e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003466:	4b4c      	ldr	r3, [pc, #304]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10f      	bne.n	8003492 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003472:	4b49      	ldr	r3, [pc, #292]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003482:	e006      	b.n	8003492 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      break;
 8003488:	e004      	b.n	8003494 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800348a:	bf00      	nop
 800348c:	e002      	b.n	8003494 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003492:	bf00      	nop
    }

    if(status == HAL_OK)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10d      	bne.n	80034b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800349a:	4b3f      	ldr	r3, [pc, #252]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6819      	ldr	r1, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	430b      	orrs	r3, r1
 80034b0:	4939      	ldr	r1, [pc, #228]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d167      	bne.n	800358c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034bc:	4b36      	ldr	r3, [pc, #216]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a35      	ldr	r2, [pc, #212]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c8:	f7fd fbcc 	bl	8000c64 <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034ce:	e009      	b.n	80034e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034d0:	f7fd fbc8 	bl	8000c64 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d902      	bls.n	80034e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	73fb      	strb	r3, [r7, #15]
        break;
 80034e2:	e005      	b.n	80034f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ef      	bne.n	80034d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d14a      	bne.n	800358c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d111      	bne.n	8003520 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034fc:	4b26      	ldr	r3, [pc, #152]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6892      	ldr	r2, [r2, #8]
 800350c:	0211      	lsls	r1, r2, #8
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68d2      	ldr	r2, [r2, #12]
 8003512:	0912      	lsrs	r2, r2, #4
 8003514:	0452      	lsls	r2, r2, #17
 8003516:	430a      	orrs	r2, r1
 8003518:	491f      	ldr	r1, [pc, #124]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351a:	4313      	orrs	r3, r2
 800351c:	614b      	str	r3, [r1, #20]
 800351e:	e011      	b.n	8003544 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003520:	4b1d      	ldr	r3, [pc, #116]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003528:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6892      	ldr	r2, [r2, #8]
 8003530:	0211      	lsls	r1, r2, #8
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6912      	ldr	r2, [r2, #16]
 8003536:	0852      	lsrs	r2, r2, #1
 8003538:	3a01      	subs	r2, #1
 800353a:	0652      	lsls	r2, r2, #25
 800353c:	430a      	orrs	r2, r1
 800353e:	4916      	ldr	r1, [pc, #88]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003540:	4313      	orrs	r3, r2
 8003542:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003544:	4b14      	ldr	r3, [pc, #80]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a13      	ldr	r2, [pc, #76]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 800354a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800354e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fd fb88 	bl	8000c64 <HAL_GetTick>
 8003554:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003556:	e009      	b.n	800356c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003558:	f7fd fb84 	bl	8000c64 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d902      	bls.n	800356c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	73fb      	strb	r3, [r7, #15]
          break;
 800356a:	e005      	b.n	8003578 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800356c:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ef      	beq.n	8003558 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	4904      	ldr	r1, [pc, #16]	@ (8003598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003588:	4313      	orrs	r3, r2
 800358a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000

0800359c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e040      	b.n	8003630 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd fa0e 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2224      	movs	r2, #36	@ 0x24
 80035c8:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0201 	bic.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fbc2 	bl	8003d64 <UART_SetConfig>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e022      	b.n	8003630 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fe6e 	bl	80042d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fef5 	bl	8004418 <UART_CheckIdleState>
 800362e:	4603      	mov	r3, r0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08a      	sub	sp, #40	@ 0x28
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800364c:	2b20      	cmp	r3, #32
 800364e:	f040 8081 	bne.w	8003754 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_UART_Transmit+0x26>
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e079      	b.n	8003756 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_UART_Transmit+0x38>
 800366c:	2302      	movs	r3, #2
 800366e:	e072      	b.n	8003756 <HAL_UART_Transmit+0x11e>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2221      	movs	r2, #33	@ 0x21
 8003684:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003686:	f7fd faed 	bl	8000c64 <HAL_GetTick>
 800368a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	88fa      	ldrh	r2, [r7, #6]
 8003698:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a4:	d108      	bne.n	80036b8 <HAL_UART_Transmit+0x80>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d104      	bne.n	80036b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	e003      	b.n	80036c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 80036c8:	e02c      	b.n	8003724 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2200      	movs	r2, #0
 80036d2:	2180      	movs	r1, #128	@ 0x80
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fee8 	bl	80044aa <UART_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e038      	b.n	8003756 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10b      	bne.n	8003702 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	881a      	ldrh	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f6:	b292      	uxth	r2, r2
 80036f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	3302      	adds	r3, #2
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e007      	b.n	8003712 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	781a      	ldrb	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	3301      	adds	r3, #1
 8003710:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1cc      	bne.n	80036ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2200      	movs	r2, #0
 8003738:	2140      	movs	r1, #64	@ 0x40
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 feb5 	bl	80044aa <UART_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e005      	b.n	8003756 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b0ba      	sub	sp, #232	@ 0xe8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800378a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800378e:	4013      	ands	r3, r2
 8003790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d115      	bne.n	80037c8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800379c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00f      	beq.n	80037c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 82a6 	beq.w	8003d0a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
      }
      return;
 80037c6:	e2a0      	b.n	8003d0a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80037c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 8117 	beq.w	8003a00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80037e2:	4b85      	ldr	r3, [pc, #532]	@ (80039f8 <HAL_UART_IRQHandler+0x298>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 810a 	beq.w	8003a00 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d011      	beq.n	800381c <HAL_UART_IRQHandler+0xbc>
 80037f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00b      	beq.n	800381c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800381c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d011      	beq.n	800384c <HAL_UART_IRQHandler+0xec>
 8003828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00b      	beq.n	800384c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2202      	movs	r2, #2
 800383a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003842:	f043 0204 	orr.w	r2, r3, #4
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800384c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d011      	beq.n	800387c <HAL_UART_IRQHandler+0x11c>
 8003858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2204      	movs	r2, #4
 800386a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003872:	f043 0202 	orr.w	r2, r3, #2
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800387c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003898:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00b      	beq.n	80038b8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2208      	movs	r2, #8
 80038a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ae:	f043 0208 	orr.w	r2, r3, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d012      	beq.n	80038ea <HAL_UART_IRQHandler+0x18a>
 80038c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00c      	beq.n	80038ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 820c 	beq.w	8003d0e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00d      	beq.n	800391e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d007      	beq.n	800391e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003924:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003932:	2b40      	cmp	r3, #64	@ 0x40
 8003934:	d005      	beq.n	8003942 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800393a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800393e:	2b00      	cmp	r3, #0
 8003940:	d04f      	beq.n	80039e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fe75 	bl	8004632 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003952:	2b40      	cmp	r3, #64	@ 0x40
 8003954:	d141      	bne.n	80039da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3308      	adds	r3, #8
 800395c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800396c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003982:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003986:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800398e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800399a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1d9      	bne.n	8003956 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d013      	beq.n	80039d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ae:	4a13      	ldr	r2, [pc, #76]	@ (80039fc <HAL_UART_IRQHandler+0x29c>)
 80039b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd fad3 	bl	8000f62 <HAL_DMA_Abort_IT>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d017      	beq.n	80039f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 80039cc:	4610      	mov	r0, r2
 80039ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	e00f      	b.n	80039f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f9b0 	bl	8003d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d8:	e00b      	b.n	80039f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f9ac 	bl	8003d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	e007      	b.n	80039f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f9a8 	bl	8003d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
    return;
 80039f0:	e18d      	b.n	8003d0e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f2:	bf00      	nop
    return;
 80039f4:	e18b      	b.n	8003d0e <HAL_UART_IRQHandler+0x5ae>
 80039f6:	bf00      	nop
 80039f8:	04000120 	.word	0x04000120
 80039fc:	080046f9 	.word	0x080046f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 8146 	bne.w	8003c96 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 813f 	beq.w	8003c96 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8138 	beq.w	8003c96 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2210      	movs	r2, #16
 8003a2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a38:	2b40      	cmp	r3, #64	@ 0x40
 8003a3a:	f040 80b4 	bne.w	8003ba6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 815f 	beq.w	8003d12 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	f080 8157 	bcs.w	8003d12 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 8085 	bne.w	8003b8a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003aaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003aae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1da      	bne.n	8003a80 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ada:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003aee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003af6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e1      	bne.n	8003aca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3308      	adds	r3, #8
 8003b26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e3      	bne.n	8003b06 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b5a:	f023 0310 	bic.w	r3, r3, #16
 8003b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b6e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e4      	bne.n	8003b4a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fd f9ae 	bl	8000ee6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f8d4 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ba4:	e0b5      	b.n	8003d12 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80a7 	beq.w	8003d16 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80a2 	beq.w	8003d16 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003be6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e4      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	623b      	str	r3, [r7, #32]
   return(result);
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3308      	adds	r3, #8
 8003c28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e3      	bne.n	8003c08 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	665a      	str	r2, [r3, #100]	@ 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0310 	bic.w	r3, r3, #16
 8003c66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	617b      	str	r3, [r7, #20]
   return(result);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e4      	bne.n	8003c52 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f85c 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c94:	e03f      	b.n	8003d16 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00e      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x560>
 8003ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d008      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003cb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fd5d 	bl	8004778 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cbe:	e02d      	b.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00e      	beq.n	8003cea <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01c      	beq.n	8003d1a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
    }
    return;
 8003ce8:	e017      	b.n	8003d1a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d012      	beq.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
 8003cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fd0e 	bl	8004724 <UART_EndTransmit_IT>
    return;
 8003d08:	e008      	b.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003d0a:	bf00      	nop
 8003d0c:	e006      	b.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003d0e:	bf00      	nop
 8003d10:	e004      	b.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003d1a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003d1c:	37e8      	adds	r7, #232	@ 0xe8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop

08003d24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d68:	b08a      	sub	sp, #40	@ 0x28
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4ba4      	ldr	r3, [pc, #656]	@ (8004024 <UART_SetConfig+0x2c0>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a99      	ldr	r2, [pc, #612]	@ (8004028 <UART_SetConfig+0x2c4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de0:	430a      	orrs	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a90      	ldr	r2, [pc, #576]	@ (800402c <UART_SetConfig+0x2c8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d126      	bne.n	8003e3c <UART_SetConfig+0xd8>
 8003dee:	4b90      	ldr	r3, [pc, #576]	@ (8004030 <UART_SetConfig+0x2cc>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d81b      	bhi.n	8003e34 <UART_SetConfig+0xd0>
 8003dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <UART_SetConfig+0xa0>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e15 	.word	0x08003e15
 8003e08:	08003e25 	.word	0x08003e25
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e2d 	.word	0x08003e2d
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1a:	e116      	b.n	800404a <UART_SetConfig+0x2e6>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e22:	e112      	b.n	800404a <UART_SetConfig+0x2e6>
 8003e24:	2304      	movs	r3, #4
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2a:	e10e      	b.n	800404a <UART_SetConfig+0x2e6>
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e32:	e10a      	b.n	800404a <UART_SetConfig+0x2e6>
 8003e34:	2310      	movs	r3, #16
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e3a:	e106      	b.n	800404a <UART_SetConfig+0x2e6>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a7c      	ldr	r2, [pc, #496]	@ (8004034 <UART_SetConfig+0x2d0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d138      	bne.n	8003eb8 <UART_SetConfig+0x154>
 8003e46:	4b7a      	ldr	r3, [pc, #488]	@ (8004030 <UART_SetConfig+0x2cc>)
 8003e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	d82d      	bhi.n	8003eb0 <UART_SetConfig+0x14c>
 8003e54:	a201      	add	r2, pc, #4	@ (adr r2, 8003e5c <UART_SetConfig+0xf8>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003e91 	.word	0x08003e91
 8003e60:	08003eb1 	.word	0x08003eb1
 8003e64:	08003eb1 	.word	0x08003eb1
 8003e68:	08003eb1 	.word	0x08003eb1
 8003e6c:	08003ea1 	.word	0x08003ea1
 8003e70:	08003eb1 	.word	0x08003eb1
 8003e74:	08003eb1 	.word	0x08003eb1
 8003e78:	08003eb1 	.word	0x08003eb1
 8003e7c:	08003e99 	.word	0x08003e99
 8003e80:	08003eb1 	.word	0x08003eb1
 8003e84:	08003eb1 	.word	0x08003eb1
 8003e88:	08003eb1 	.word	0x08003eb1
 8003e8c:	08003ea9 	.word	0x08003ea9
 8003e90:	2300      	movs	r3, #0
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e96:	e0d8      	b.n	800404a <UART_SetConfig+0x2e6>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9e:	e0d4      	b.n	800404a <UART_SetConfig+0x2e6>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea6:	e0d0      	b.n	800404a <UART_SetConfig+0x2e6>
 8003ea8:	2308      	movs	r3, #8
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eae:	e0cc      	b.n	800404a <UART_SetConfig+0x2e6>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb6:	e0c8      	b.n	800404a <UART_SetConfig+0x2e6>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a5e      	ldr	r2, [pc, #376]	@ (8004038 <UART_SetConfig+0x2d4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d125      	bne.n	8003f0e <UART_SetConfig+0x1aa>
 8003ec2:	4b5b      	ldr	r3, [pc, #364]	@ (8004030 <UART_SetConfig+0x2cc>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ecc:	2b30      	cmp	r3, #48	@ 0x30
 8003ece:	d016      	beq.n	8003efe <UART_SetConfig+0x19a>
 8003ed0:	2b30      	cmp	r3, #48	@ 0x30
 8003ed2:	d818      	bhi.n	8003f06 <UART_SetConfig+0x1a2>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d00a      	beq.n	8003eee <UART_SetConfig+0x18a>
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d814      	bhi.n	8003f06 <UART_SetConfig+0x1a2>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <UART_SetConfig+0x182>
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d008      	beq.n	8003ef6 <UART_SetConfig+0x192>
 8003ee4:	e00f      	b.n	8003f06 <UART_SetConfig+0x1a2>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eec:	e0ad      	b.n	800404a <UART_SetConfig+0x2e6>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef4:	e0a9      	b.n	800404a <UART_SetConfig+0x2e6>
 8003ef6:	2304      	movs	r3, #4
 8003ef8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efc:	e0a5      	b.n	800404a <UART_SetConfig+0x2e6>
 8003efe:	2308      	movs	r3, #8
 8003f00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f04:	e0a1      	b.n	800404a <UART_SetConfig+0x2e6>
 8003f06:	2310      	movs	r3, #16
 8003f08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0c:	e09d      	b.n	800404a <UART_SetConfig+0x2e6>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a4a      	ldr	r2, [pc, #296]	@ (800403c <UART_SetConfig+0x2d8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d125      	bne.n	8003f64 <UART_SetConfig+0x200>
 8003f18:	4b45      	ldr	r3, [pc, #276]	@ (8004030 <UART_SetConfig+0x2cc>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f22:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f24:	d016      	beq.n	8003f54 <UART_SetConfig+0x1f0>
 8003f26:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f28:	d818      	bhi.n	8003f5c <UART_SetConfig+0x1f8>
 8003f2a:	2b80      	cmp	r3, #128	@ 0x80
 8003f2c:	d00a      	beq.n	8003f44 <UART_SetConfig+0x1e0>
 8003f2e:	2b80      	cmp	r3, #128	@ 0x80
 8003f30:	d814      	bhi.n	8003f5c <UART_SetConfig+0x1f8>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <UART_SetConfig+0x1d8>
 8003f36:	2b40      	cmp	r3, #64	@ 0x40
 8003f38:	d008      	beq.n	8003f4c <UART_SetConfig+0x1e8>
 8003f3a:	e00f      	b.n	8003f5c <UART_SetConfig+0x1f8>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f42:	e082      	b.n	800404a <UART_SetConfig+0x2e6>
 8003f44:	2302      	movs	r3, #2
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f4a:	e07e      	b.n	800404a <UART_SetConfig+0x2e6>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f52:	e07a      	b.n	800404a <UART_SetConfig+0x2e6>
 8003f54:	2308      	movs	r3, #8
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f5a:	e076      	b.n	800404a <UART_SetConfig+0x2e6>
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f62:	e072      	b.n	800404a <UART_SetConfig+0x2e6>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a35      	ldr	r2, [pc, #212]	@ (8004040 <UART_SetConfig+0x2dc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d12a      	bne.n	8003fc4 <UART_SetConfig+0x260>
 8003f6e:	4b30      	ldr	r3, [pc, #192]	@ (8004030 <UART_SetConfig+0x2cc>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f7c:	d01a      	beq.n	8003fb4 <UART_SetConfig+0x250>
 8003f7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f82:	d81b      	bhi.n	8003fbc <UART_SetConfig+0x258>
 8003f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f88:	d00c      	beq.n	8003fa4 <UART_SetConfig+0x240>
 8003f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f8e:	d815      	bhi.n	8003fbc <UART_SetConfig+0x258>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <UART_SetConfig+0x238>
 8003f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f98:	d008      	beq.n	8003fac <UART_SetConfig+0x248>
 8003f9a:	e00f      	b.n	8003fbc <UART_SetConfig+0x258>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa2:	e052      	b.n	800404a <UART_SetConfig+0x2e6>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003faa:	e04e      	b.n	800404a <UART_SetConfig+0x2e6>
 8003fac:	2304      	movs	r3, #4
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb2:	e04a      	b.n	800404a <UART_SetConfig+0x2e6>
 8003fb4:	2308      	movs	r3, #8
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fba:	e046      	b.n	800404a <UART_SetConfig+0x2e6>
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc2:	e042      	b.n	800404a <UART_SetConfig+0x2e6>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a17      	ldr	r2, [pc, #92]	@ (8004028 <UART_SetConfig+0x2c4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d13a      	bne.n	8004044 <UART_SetConfig+0x2e0>
 8003fce:	4b18      	ldr	r3, [pc, #96]	@ (8004030 <UART_SetConfig+0x2cc>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fdc:	d01a      	beq.n	8004014 <UART_SetConfig+0x2b0>
 8003fde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fe2:	d81b      	bhi.n	800401c <UART_SetConfig+0x2b8>
 8003fe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fe8:	d00c      	beq.n	8004004 <UART_SetConfig+0x2a0>
 8003fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fee:	d815      	bhi.n	800401c <UART_SetConfig+0x2b8>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <UART_SetConfig+0x298>
 8003ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff8:	d008      	beq.n	800400c <UART_SetConfig+0x2a8>
 8003ffa:	e00f      	b.n	800401c <UART_SetConfig+0x2b8>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004002:	e022      	b.n	800404a <UART_SetConfig+0x2e6>
 8004004:	2302      	movs	r3, #2
 8004006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400a:	e01e      	b.n	800404a <UART_SetConfig+0x2e6>
 800400c:	2304      	movs	r3, #4
 800400e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004012:	e01a      	b.n	800404a <UART_SetConfig+0x2e6>
 8004014:	2308      	movs	r3, #8
 8004016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401a:	e016      	b.n	800404a <UART_SetConfig+0x2e6>
 800401c:	2310      	movs	r3, #16
 800401e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004022:	e012      	b.n	800404a <UART_SetConfig+0x2e6>
 8004024:	efff69f3 	.word	0xefff69f3
 8004028:	40008000 	.word	0x40008000
 800402c:	40013800 	.word	0x40013800
 8004030:	40021000 	.word	0x40021000
 8004034:	40004400 	.word	0x40004400
 8004038:	40004800 	.word	0x40004800
 800403c:	40004c00 	.word	0x40004c00
 8004040:	40005000 	.word	0x40005000
 8004044:	2310      	movs	r3, #16
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a9f      	ldr	r2, [pc, #636]	@ (80042cc <UART_SetConfig+0x568>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d17a      	bne.n	800414a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004054:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004058:	2b08      	cmp	r3, #8
 800405a:	d824      	bhi.n	80040a6 <UART_SetConfig+0x342>
 800405c:	a201      	add	r2, pc, #4	@ (adr r2, 8004064 <UART_SetConfig+0x300>)
 800405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004062:	bf00      	nop
 8004064:	08004089 	.word	0x08004089
 8004068:	080040a7 	.word	0x080040a7
 800406c:	08004091 	.word	0x08004091
 8004070:	080040a7 	.word	0x080040a7
 8004074:	08004097 	.word	0x08004097
 8004078:	080040a7 	.word	0x080040a7
 800407c:	080040a7 	.word	0x080040a7
 8004080:	080040a7 	.word	0x080040a7
 8004084:	0800409f 	.word	0x0800409f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004088:	f7fe fd40 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 800408c:	61f8      	str	r0, [r7, #28]
        break;
 800408e:	e010      	b.n	80040b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004090:	4b8f      	ldr	r3, [pc, #572]	@ (80042d0 <UART_SetConfig+0x56c>)
 8004092:	61fb      	str	r3, [r7, #28]
        break;
 8004094:	e00d      	b.n	80040b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004096:	f7fe fca3 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800409a:	61f8      	str	r0, [r7, #28]
        break;
 800409c:	e009      	b.n	80040b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040a2:	61fb      	str	r3, [r7, #28]
        break;
 80040a4:	e005      	b.n	80040b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80fb 	beq.w	80042b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d305      	bcc.n	80040d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d903      	bls.n	80040de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040dc:	e0e8      	b.n	80042b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	2200      	movs	r2, #0
 80040e2:	461c      	mov	r4, r3
 80040e4:	4615      	mov	r5, r2
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	022b      	lsls	r3, r5, #8
 80040f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040f4:	0222      	lsls	r2, r4, #8
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	6849      	ldr	r1, [r1, #4]
 80040fa:	0849      	lsrs	r1, r1, #1
 80040fc:	2000      	movs	r0, #0
 80040fe:	4688      	mov	r8, r1
 8004100:	4681      	mov	r9, r0
 8004102:	eb12 0a08 	adds.w	sl, r2, r8
 8004106:	eb43 0b09 	adc.w	fp, r3, r9
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004118:	4650      	mov	r0, sl
 800411a:	4659      	mov	r1, fp
 800411c:	f7fc f854 	bl	80001c8 <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4613      	mov	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800412e:	d308      	bcc.n	8004142 <UART_SetConfig+0x3de>
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004136:	d204      	bcs.n	8004142 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	60da      	str	r2, [r3, #12]
 8004140:	e0b6      	b.n	80042b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004148:	e0b2      	b.n	80042b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004152:	d15e      	bne.n	8004212 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004154:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004158:	2b08      	cmp	r3, #8
 800415a:	d828      	bhi.n	80041ae <UART_SetConfig+0x44a>
 800415c:	a201      	add	r2, pc, #4	@ (adr r2, 8004164 <UART_SetConfig+0x400>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	08004189 	.word	0x08004189
 8004168:	08004191 	.word	0x08004191
 800416c:	08004199 	.word	0x08004199
 8004170:	080041af 	.word	0x080041af
 8004174:	0800419f 	.word	0x0800419f
 8004178:	080041af 	.word	0x080041af
 800417c:	080041af 	.word	0x080041af
 8004180:	080041af 	.word	0x080041af
 8004184:	080041a7 	.word	0x080041a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004188:	f7fe fcc0 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 800418c:	61f8      	str	r0, [r7, #28]
        break;
 800418e:	e014      	b.n	80041ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004190:	f7fe fcd2 	bl	8002b38 <HAL_RCC_GetPCLK2Freq>
 8004194:	61f8      	str	r0, [r7, #28]
        break;
 8004196:	e010      	b.n	80041ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004198:	4b4d      	ldr	r3, [pc, #308]	@ (80042d0 <UART_SetConfig+0x56c>)
 800419a:	61fb      	str	r3, [r7, #28]
        break;
 800419c:	e00d      	b.n	80041ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419e:	f7fe fc1f 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 80041a2:	61f8      	str	r0, [r7, #28]
        break;
 80041a4:	e009      	b.n	80041ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041aa:	61fb      	str	r3, [r7, #28]
        break;
 80041ac:	e005      	b.n	80041ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80041b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d077      	beq.n	80042b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	005a      	lsls	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	441a      	add	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b0f      	cmp	r3, #15
 80041da:	d916      	bls.n	800420a <UART_SetConfig+0x4a6>
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e2:	d212      	bcs.n	800420a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f023 030f 	bic.w	r3, r3, #15
 80041ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	8afb      	ldrh	r3, [r7, #22]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	8afa      	ldrh	r2, [r7, #22]
 8004206:	60da      	str	r2, [r3, #12]
 8004208:	e052      	b.n	80042b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004210:	e04e      	b.n	80042b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004212:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004216:	2b08      	cmp	r3, #8
 8004218:	d827      	bhi.n	800426a <UART_SetConfig+0x506>
 800421a:	a201      	add	r2, pc, #4	@ (adr r2, 8004220 <UART_SetConfig+0x4bc>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	0800426b 	.word	0x0800426b
 8004230:	0800425b 	.word	0x0800425b
 8004234:	0800426b 	.word	0x0800426b
 8004238:	0800426b 	.word	0x0800426b
 800423c:	0800426b 	.word	0x0800426b
 8004240:	08004263 	.word	0x08004263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004244:	f7fe fc62 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 8004248:	61f8      	str	r0, [r7, #28]
        break;
 800424a:	e014      	b.n	8004276 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7fe fc74 	bl	8002b38 <HAL_RCC_GetPCLK2Freq>
 8004250:	61f8      	str	r0, [r7, #28]
        break;
 8004252:	e010      	b.n	8004276 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004254:	4b1e      	ldr	r3, [pc, #120]	@ (80042d0 <UART_SetConfig+0x56c>)
 8004256:	61fb      	str	r3, [r7, #28]
        break;
 8004258:	e00d      	b.n	8004276 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425a:	f7fe fbc1 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 800425e:	61f8      	str	r0, [r7, #28]
        break;
 8004260:	e009      	b.n	8004276 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004266:	61fb      	str	r3, [r7, #28]
        break;
 8004268:	e005      	b.n	8004276 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004274:	bf00      	nop
    }

    if (pclk != 0U)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d019      	beq.n	80042b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	085a      	lsrs	r2, r3, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	441a      	add	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	fbb2 f3f3 	udiv	r3, r2, r3
 800428e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b0f      	cmp	r3, #15
 8004294:	d909      	bls.n	80042aa <UART_SetConfig+0x546>
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800429c:	d205      	bcs.n	80042aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60da      	str	r2, [r3, #12]
 80042a8:	e002      	b.n	80042b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 80042bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3728      	adds	r7, #40	@ 0x28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ca:	bf00      	nop
 80042cc:	40008000 	.word	0x40008000
 80042d0:	00f42400 	.word	0x00f42400

080042d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01a      	beq.n	80043ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043d2:	d10a      	bne.n	80043ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]
  }
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af02      	add	r7, sp, #8
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004428:	f7fc fc1c 	bl	8000c64 <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d10e      	bne.n	800445a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800443c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f82d 	bl	80044aa <UART_WaitOnFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e023      	b.n	80044a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b04      	cmp	r3, #4
 8004466:	d10e      	bne.n	8004486 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004468:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f817 	bl	80044aa <UART_WaitOnFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e00d      	b.n	80044a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b09c      	sub	sp, #112	@ 0x70
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	4613      	mov	r3, r2
 80044b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ba:	e0a5      	b.n	8004608 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	f000 80a1 	beq.w	8004608 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c6:	f7fc fbcd 	bl	8000c64 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <UART_WaitOnFlagUntilTimeout+0x32>
 80044d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d13e      	bne.n	800455a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80044ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ec:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80044f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044fc:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004500:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e6      	bne.n	80044dc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3308      	adds	r3, #8
 8004514:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800451e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	663b      	str	r3, [r7, #96]	@ 0x60
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3308      	adds	r3, #8
 800452c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800452e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004530:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004534:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800453c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e5      	bne.n	800450e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e067      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d04f      	beq.n	8004608 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004576:	d147      	bne.n	8004608 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004580:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045a2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80045ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e6      	bne.n	8004582 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3308      	adds	r3, #8
 80045ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	613b      	str	r3, [r7, #16]
   return(result);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3308      	adds	r3, #8
 80045d2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80045d4:	623a      	str	r2, [r7, #32]
 80045d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	69f9      	ldr	r1, [r7, #28]
 80045da:	6a3a      	ldr	r2, [r7, #32]
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e5      	bne.n	80045b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e010      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4013      	ands	r3, r2
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	429a      	cmp	r2, r3
 8004624:	f43f af4a 	beq.w	80044bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3770      	adds	r7, #112	@ 0x70
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004632:	b480      	push	{r7}
 8004634:	b095      	sub	sp, #84	@ 0x54
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800464e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004658:	643b      	str	r3, [r7, #64]	@ 0x40
 800465a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800465e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e6      	bne.n	800463a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	61fb      	str	r3, [r7, #28]
   return(result);
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800468c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800468e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e5      	bne.n	800466c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d118      	bne.n	80046da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f023 0310 	bic.w	r3, r3, #16
 80046bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6979      	ldr	r1, [r7, #20]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	613b      	str	r3, [r7, #16]
   return(result);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e6      	bne.n	80046a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	665a      	str	r2, [r3, #100]	@ 0x64
}
 80046ec:	bf00      	nop
 80046ee:	3754      	adds	r7, #84	@ 0x54
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff fb0e 	bl	8003d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	60bb      	str	r3, [r7, #8]
   return(result);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6979      	ldr	r1, [r7, #20]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	613b      	str	r3, [r7, #16]
   return(result);
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e6      	bne.n	800472c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	669a      	str	r2, [r3, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fada 	bl	8003d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004770:	bf00      	nop
 8004772:	3720      	adds	r7, #32
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <memset>:
 800478c:	4402      	add	r2, r0
 800478e:	4603      	mov	r3, r0
 8004790:	4293      	cmp	r3, r2
 8004792:	d100      	bne.n	8004796 <memset+0xa>
 8004794:	4770      	bx	lr
 8004796:	f803 1b01 	strb.w	r1, [r3], #1
 800479a:	e7f9      	b.n	8004790 <memset+0x4>

0800479c <__libc_init_array>:
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	4d0d      	ldr	r5, [pc, #52]	@ (80047d4 <__libc_init_array+0x38>)
 80047a0:	4c0d      	ldr	r4, [pc, #52]	@ (80047d8 <__libc_init_array+0x3c>)
 80047a2:	1b64      	subs	r4, r4, r5
 80047a4:	10a4      	asrs	r4, r4, #2
 80047a6:	2600      	movs	r6, #0
 80047a8:	42a6      	cmp	r6, r4
 80047aa:	d109      	bne.n	80047c0 <__libc_init_array+0x24>
 80047ac:	4d0b      	ldr	r5, [pc, #44]	@ (80047dc <__libc_init_array+0x40>)
 80047ae:	4c0c      	ldr	r4, [pc, #48]	@ (80047e0 <__libc_init_array+0x44>)
 80047b0:	f000 f818 	bl	80047e4 <_init>
 80047b4:	1b64      	subs	r4, r4, r5
 80047b6:	10a4      	asrs	r4, r4, #2
 80047b8:	2600      	movs	r6, #0
 80047ba:	42a6      	cmp	r6, r4
 80047bc:	d105      	bne.n	80047ca <__libc_init_array+0x2e>
 80047be:	bd70      	pop	{r4, r5, r6, pc}
 80047c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c4:	4798      	blx	r3
 80047c6:	3601      	adds	r6, #1
 80047c8:	e7ee      	b.n	80047a8 <__libc_init_array+0xc>
 80047ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ce:	4798      	blx	r3
 80047d0:	3601      	adds	r6, #1
 80047d2:	e7f2      	b.n	80047ba <__libc_init_array+0x1e>
 80047d4:	0800484c 	.word	0x0800484c
 80047d8:	0800484c 	.word	0x0800484c
 80047dc:	0800484c 	.word	0x0800484c
 80047e0:	08004850 	.word	0x08004850

080047e4 <_init>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	bf00      	nop
 80047e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ea:	bc08      	pop	{r3}
 80047ec:	469e      	mov	lr, r3
 80047ee:	4770      	bx	lr

080047f0 <_fini>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr
